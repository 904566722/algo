{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u5173\u4e8e","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e\u300c\u7b97\u6cd5\u5b66\u4e60\u300d\u7684\u4e13\u9898\u7ad9\u70b9\uff0c\u59cb\u4e8e 2023/05/28\uff0c\u4e3b\u8981\u7528\u9014\u662f\u7528\u6765\u8bb0\u5f55\u81ea\u5df1\u7684\u505a\u9898\u60c5\u51b5\uff0c\u8bb0\u5f55\u4e00\u4e0b\u81ea\u5df1\u5728\u7b97\u6cd5\u4e0a\u7684\u4e9b\u8bb8\u6210\u957f</p> <p>\u5efa\u8bbe\u4e2d...</p>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/","title":"\u6811\u300c\u5b66\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_1","title":"\u4e00\u3001\u6811\u7684\u56db\u79cd\u904d\u5386","text":"<p>\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09\uff1a\u524d\u5e8f\uff08DLR\uff09\u3001\u4e2d\u5e8f\uff08LDR\uff09\u3001\u540e\u5e8f\uff08LRD\uff09</p> <p>\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff08BFS\uff09\uff1a\u5c42\u5e8f\u904d\u5386</p> <p>\u8282\u70b9\u7684\u5b9a\u4e49\uff1a <pre><code>type treeNode struct {\nval    int\nleft   *treeNode\nright  *treeNode\n}\n</code></pre></p>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_2","title":"\u524d\u5e8f","text":"\u9012\u5f52\u975e\u9012\u5f52 <pre><code>// \u524d\u5e8f\u904d\u5386: \u8bbf\u95ee\u6839\u8282\u70b9\uff0c\u4ee5\u524d\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\u8bbf\u95ee\u5de6\u8282\u70b9\uff0c\u4ee5\u524d\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\u8bbf\u95ee\u53f3\u8282\u70b9  \nfunc pOrder(root *treeNode)  {  // end  \nif root == nil {  return  }  fmt.Printf(\"%d \", root.val)\npOrder(root.left)  pOrder(root.right)  return  }\n</code></pre> <pre><code>func pOrderStack(root *treeNode)  {  if root == nil {  return  }  var st []*treeNode  st = append(st, root)  var pnt []int  for len(st) &gt; 0 {  // \u51fa\u6808\uff0c\u8bbf\u95ee\u8282\u70b9\ncur := st[len(st)-1]  st = st[:len(st)-1]  pnt = append(pnt, cur.val)  // \u53f3\u8282\u70b9\u5165\u6808\uff08\u5b58\u5728\u7684\u8bdd\uff09\nif cur.right != nil {  st = append(st, cur.right)  }  // \u5de6\u8282\u70b9\u5165\u6808\nif cur.left != nil {  st = append(st, cur.left)  }  }  fmt.Println(pnt)  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_3","title":"\u4e2d\u5e8f","text":"\u9012\u5f52\u975e\u9012\u5f52 <pre><code>// \u6309\u4e2d\u5e8f\u904d\u5386\u8bbf\u95ee\u5de6\u8282\u70b9\uff0c\u8bbf\u95ee\u8282\u70b9\u5143\u7d20\uff0c\u6309\u4e2d\u5e8f\u904d\u5386\u8bbf\u95ee\u53f3\u8282\u70b9  \nfunc ldrOrder(root *treeNode)  {  if root == nil {  return  }  ldrOrder(root.left)  fmt.Printf(\"%d \", root.val)  ldrOrder(root.right)  return  }\n</code></pre> <ol> <li>\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5165\u6808\uff0c\u4e00\u76f4\u5f80\u5de6\uff0c\u76f4\u5230\u6700\u5de6\u53f6\u5b50\u8282\u70b9</li> <li>\u51fa\u6808\uff0c\u8bbf\u95ee\u8282\u70b9</li> <li>\u5c06\u53f3\u8282\u70b9\u5f53\u4f5c\u6b65\u9aa41\u7684\u6839\u8282\u70b9\uff08\u82e5\u5b58\u5728\uff09</li> </ol> <pre><code>// \u4ee3\u7801\u4f18\u5316\nfunc ldrOrderStack2(root *treeNode) {  if root == nil {  return  }  var st []*treeNode  // \u51fa\u6808\uff0c\u8bbf\u95ee\u5143\u7d20  \n// \u5982\u679c\u5b58\u5728\u53f3\u8282\u70b9\uff0c\u7ee7\u7eed\u5165\u6808\uff0c\u76f4\u5230\u6700\u5de6\u53f6\u5b50\u8282\u70b9  \nvar pnt []int  tmp := root  for len(st) &gt; 0 || tmp != nil {  // \u5165\u6808\u76f4\u5230\u6700\u5de6\u8282\u70b9  \nfor tmp != nil {  st = append(st, tmp)  tmp = tmp.left  }  // \u51fa\u6808\uff0c\u8bbf\u95ee\u8282\u70b9\u5143\u7d20  \ntmp = st[len(st)-1]  st = st[:len(st)-1]  pnt = append(pnt, tmp.val)  // \u7ee7\u7eed\u627e\u53f3\u8282\u70b9\u7684\u6700\u5de6\u53f6\u5b50\u8282\u70b9  \ntmp = tmp.right  }  return  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_4","title":"\u540e\u5e8f","text":"\u9012\u5f52\u975e\u9012\u5f52 <pre><code>func lrdOrder(root *treeNode)  {  if root == nil {  return  }  lrdOrder(root.left)  lrdOrder(root.right)  fmt.Printf(\"%d \", root.val)  return  }\n</code></pre> <ol> <li>\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5165\u6808\uff0c\u76f4\u5230\u6700\u5de6\u8282\u70b9</li> <li>\u83b7\u53d6\u6808\u9876\uff0c\u5224\u65ad\u53f3\u8282\u70b9<ul> <li>\u53f3\u8282\u70b9\u4e0d\u5b58\u5728\uff1a\u8bbf\u95ee\u8be5\u8282\u70b9\uff0c\u51fa\u6808</li> <li>\u53f3\u8282\u70b9\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff1a\u8bbf\u95ee\u8be5\u8282\u70b9\uff0c\u51fa\u6808</li> <li>\u53f3\u8282\u70b9\u672a\u8bbf\u95ee\uff0c\u8fdb\u5165\u6b65\u9aa43</li> </ul> </li> <li>\u5c06\u8be5\u53f3\u8282\u70b9\u5f53\u4f5c\u6b65\u9aa41\u7684\u6839\u8282\u70b9</li> </ol> <pre><code>func lrdOrderStack(root *treeNode)  {  var st []*treeNode  tmpRoot := root  pre := root  for len(st) &gt; 0 || tmpRoot != nil {  for tmpRoot != nil {  st = append(st, tmpRoot)  tmpRoot = tmpRoot.left  }  tmpRoot = st[len(st)-1]  // \u5f53\u8282\u70b9\u53f3\u8282\u70b9\u4e3a\u7a7a \u6216\u8005 \u53f3\u5b50\u6811\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u60c5\u51b5\u4e0b\uff0c\u8bbf\u95ee\u6839\u8282\u70b9  \nif tmpRoot.right == nil || tmpRoot.right == pre {  fmt.Printf(\"%d \", tmpRoot.val)  pre = tmpRoot  tmpRoot = nil  // \u5c06\u5f53\u524d\u8282\u70b9\u6807\u8bb0\u4e3a\u7a7a\uff0c\u907f\u514d\u4e0b\u4e00\u4e2a\u5faa\u73af\u53c8\u5c06\u8be5\u8282\u70b9\u5165\u6808  \nst = st[:len(st)-1]  } else {  // \u53f3\u8282\u70b9\u8fd8\u6ca1\u8bbf\u95ee\uff0c\u540e\u5e8f\u904d\u5386\u53f3\u8282\u70b9  \ntmpRoot = tmpRoot.right  }  }  return  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_5","title":"\u5c42\u5e8f","text":"<p>\u5c42\u5e8f\u904d\u5386\u4f7f\u7528\u961f\u5217\u5b9e\u73b0\uff1a</p> <pre><code>func levelOrder(root *treeNode)  {  if root == nil {  return  }  var queue []*treeNode  queue = append(queue, root)  for len(queue) &gt; 0 {  cur := queue[0]  queue = queue[1:]  fmt.Printf(\"%d \", cur.val)  if cur.left != nil {  queue = append(queue, cur.left)  }  if cur.right != nil {  queue = append(queue, cur.right)  }  }  return  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_6","title":"\u56db\u79cd\u904d\u5386\u7684\u65f6\u95f4\u3001\u7a7a\u95f4\u590d\u6742\u5ea6","text":"\u904d\u5386 \u65f6\u95f4\u590d\u6742\u5ea6 \u7a7a\u95f4\u590d\u6742\u5ea6 \u5148\u5e8f O(n)\u9012\u5f52\u8c03\u7528\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u9012\u5f52\u8c03\u7528\u7684\u6b21\u6570\u4e3a\u6570\u4e2d\u8282\u70b9\u7684\u6570\u91cfn \u6808\u5b9e\u73b0\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a\uff1aO(h)h\u4e3a\u6570\u7684\u9ad8\u5ea6\u5728\u8f83\u5dee\u7684\u60c5\u51b5\u4e0b\uff0ch = n\uff1b\u5982\u679c\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0ch = logn \u4e2d\u5e8f O(n) \u540c\u4e0a \u540e\u5e8f O(n) \u540c\u4e0a \u5c42\u5e8f O(n) O(w)w \u4e3a\u6811\u7684\u5bbd\u5ea6","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_7","title":"\u4e00\u4e9b\u5e38\u89c1\u95ee\u9898","text":"\u5224\u65ad\u5b50\u6811 <p>\u601d\u8def1. \u9012\u5f52</p> <p>\u5b50\u95ee\u9898\u662f\uff1a\u5224\u65ad\u5de6\u53f3\u5b50\u6811\u662f\u5426\u4f1a\u7b49\u4e8e\u9884\u671f\u7684\u5b50\u6811\uff08\u5224\u65ad\u5de6\u53f3\u5b50\u6811\u662f\u5426\u76f8\u7b49\u7684\u95ee\u9898\u4e5f\u53ef\u4ee5\u9012\u5f52\u6765\u5b9e\u73b0\uff09</p> <pre><code>// \u5224\u65ad\u6839\u8282\u70b9\u4e3a\u8d77\u59cb\u7684\u6811\u4e0e\u76ee\u6807\u6811\u662f\u5426\u76f8\u540c  \n// \u5982\u679c\u4e0d\u76f8\u540c\uff0c\u9012\u5f52\u5224\u65ad\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811  \nfunc isSubtree(root *TreeNode, subRoot *TreeNode) bool {  if root == nil &amp;&amp; subRoot == nil {  return true  }  if root == nil {  return false  }  if isSameTree(root, subRoot) {  return true  }  return isSubtree(root.Left, subRoot) || isSubtree(root.Right, subRoot)  }\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {  if p == nil &amp;&amp; q == nil {  return true  }  if p == nil || q == nil {  return false  }  if p.Val != q.Val {  return false  }  return isSameTree(p.Left, q.Left) &amp;&amp; isSameTree(p.Right, q.Right)  }\n</code></pre> <p>\u601d\u8def2. dfs\uff08\u5148\u5e8f\uff09 + kmp</p> <p>\u8bbe\u4e3b\u6811s\uff0c\u5b50\u6811t\uff0c\u4e3b\u6811\u7684\u5148\u5e8f\u5e8f\u5217 ss\uff0c\u5b50\u6811\u7684\u5148\u5e8f\u5e8f\u5217 tt</p> <p>\u5229\u7528\u5148\u5e8f\u5e8f\u5217\u7684\u6027\u8d28\uff1a</p> <p>\u5982\u679cA.\u3010 t \u662f s \u7684\u5b50\u6811\u3011 \u90a3\u4e48B.\u3010ss \u4e2d \u5305\u542b tt\u3011</p> <p>\u53ef\u4ee5\u77e5\u9053 B \u662f A \u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u662f\u6ca1\u6709\u529e\u6cd5\u4ece B \u63a8\u51fa A \u7684\uff0c\u539f\u56e0\u662f\u4ec0\u4e48\u5462\uff0c\u5047\u8bbe\u4e3b\u6811\uff1a[4, 5]\uff0c\u5b50\u6811\uff1a[4, nil, 5]\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u5148\u5e8f\u5e8f\u5217\u90fd\u662f 4 5\uff0c\u4f46\u662f\u4e24\u9897\u6811\u662f\u4e0d\u4e00\u6837\u7684</p> <p>\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8865\u5145\u4e24\u4e2a\u4ee3\u8868\u7a7a\u7684\u5de6\u53f3\u8282\u70b9\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898</p> <pre><code>// \u901a\u8fc7\u6811\u7684\u5148\u5e8f\u904d\u5386  \n// \u8865\u5145\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u8ba9\u5ea6\u4e3a2\uff0c\u8f93\u51fa\u6811\u7684\u5148\u5e8f\u904d\u5386  \n// \u5224\u65ad\u4e3b\u6811\u7684\u5e8f\u5217\u5305\u542b\u5b50\u6811\u7684\u5e8f\u5217  \nfunc isSubtree2(root *TreeNode, subRoot *TreeNode) bool {  nums1 := dlrNums(root)  nums2 := dlrNums(subRoot)  return kmpSearch(nums1, nums2)  }  const lrNilVal = -10001  var leftNilNode = TreeNode{  Val: lrNilVal,  }  var rightNilNode = TreeNode{  Val: lrNilVal,  }  func dlrNums(root *TreeNode) []int {  var nums []int  if root == nil {  return nums  }  var st []*TreeNode  st = append(st, root)  tmpRoot := root  for len(st) &gt; 0 {  // pop  \ntmpRoot = st[len(st) - 1]  st = st[:len(st) - 1]  // visit  \nnums = append(nums, tmpRoot.Val)  if tmpRoot.Val != lrNilVal &amp;&amp; tmpRoot.Left == nil {  tmpRoot.Left = &amp;leftNilNode  }  if tmpRoot.Val != lrNilVal &amp;&amp; tmpRoot.Right == nil {  tmpRoot.Right = &amp;rightNilNode  }  if tmpRoot.Right != nil {  st = append(st, tmpRoot.Right)  }  if tmpRoot.Left != nil {  st = append(st, tmpRoot.Left)  }  }  return nums  }  // i  \n//     nums a a  b  a  a  b  a  a  c  \n// pat  \n// j  \nfunc kmpSearch(nums, pat []int) bool {  next := getNext(pat)  j := 0  for i := 0; j &lt; len(pat) &amp;&amp; i &lt; len(nums); i++ {  for ; j &gt; 0 &amp;&amp; nums[i] != pat[j]; j = next[j-1]{}  if nums[i] == pat[j] {  j++  }  }  return j == len(pat)  }  func  getNext(pat []int) []int {  next := make([]int, len(pat))  next[0] = 0  for l, j := 0, 1 ; j &lt; len(pat); j++ {  for l &gt; 0 &amp;&amp; pat[l] != pat[j] {l = next[l-1]}  if pat[l] == pat[j] {  l++  }  next[j] = l  }  return next  }\n</code></pre> <p>\u5b66\u5230\u4e86\uff01</p> <p>\u5224\u65ad\u5b50\u6811\u53ef\u4ee5\u901a\u8fc7\u8865\u5145\u7a7a\u5b50\u6811\uff0c\u7136\u540e\u4f7f\u7528\u5148\u5e8f\u5e8f\u5217\u6765\u5224\u65ad</p> \u662f\u5426\u5b58\u5728\u8def\u5f84\u548c\u4e3a sum <p>\u601d\u8def\uff1a\u9012\u5f52</p> <p>\u539f\u95ee\u9898\uff1a\u662f\u5426\u5b58\u5728\u4ece\u5f53\u524d\u8282\u70b9\uff08\u6839\u8282\u70b9\uff09\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u548c\u4e3a sum \u5b50\u95ee\u9898\uff1a\u662f\u5426\u5b58\u5728\u4ece\u5f53\u524d\u8282\u70b9\uff08\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff09\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u548c\u4e3a sum - val\uff08\u7236\u8282\u70b9\u7684\u503c\uff09</p> <p>\u7ed3\u675f\u6761\u4ef6\uff1a\u5f53\u524d\u8282\u70b9\u4e3a\u53f6\u5b50\u8282\u70b9</p> <pre><code>func hasPathSum(root *TreeNode, targetSum int) bool {\nif root == nil {\nreturn false\n}\nreturn havePathToLeaf(root, targetSum)\n}\nfunc havePathToLeaf(root *TreeNode, tgtSum int) bool {  // end  \nif root.Left == nil &amp;&amp; root.Right == nil {  return root.Val == tgtSum  }  have1, have2 := false, false  if root.Left != nil {  have1 = havePathToLeaf(root.Left, tgtSum - root.Val)  }  if root.Right != nil {  have2 = havePathToLeaf(root.Right, tgtSum - root.Val)  }  return have1 || have2  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_8","title":"\u4e8c\u3001\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u4e8c\u53c9\u641c\u7d22\u6811\uff1a<code>\u5de6\u5b50\u6811\u6240\u6709\u8282\u70b9\u7684\u503c</code> &lt; <code>\u6839\u8282\u70b9</code> &lt; <code>\u53f3\u5b50\u6811\u6240\u6709\u8282\u70b9\u7684\u503c</code></p>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_9","title":"\u6dfb\u52a0\u8282\u70b9","text":"\u9012\u5f52\u975e\u9012\u5f52 <p>\u8f6c\u5316\u6210 <code>\u9012\u5f52\u63d2\u5165\u5de6\u5b50\u6811\u6216\u8005\u53f3\u5b50\u6811</code> \u5373\u53ef</p> <pre><code>func insertIntoBST(root *TreeNode, val int) *TreeNode {  if root == nil {  return &amp;TreeNode{  Val: val,  }  }  if val &lt; root.Val {  root.Left = insertIntoBST(root.Left, val)  } else {  root.Right = insertIntoBST(root.Right, val)  }  return root  }\n</code></pre> <pre><code>func insertIntoBST2(root *TreeNode, val int) *TreeNode {  if root == nil {  return &amp;TreeNode{  Val: val,  }  }  pre := root  tmpRoot := root  for tmpRoot != nil {  if val &lt; tmpRoot.Val {  pre = tmpRoot  tmpRoot = tmpRoot.Left  } else {  pre = tmpRoot  tmpRoot = tmpRoot.Right  }  }  newNode := &amp;TreeNode{Val: val}  if val &lt; pre.Val {  pre.Left = newNode  } else {  pre.Right = newNode  }  return root  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_10","title":"\u5220\u9664\u8282\u70b9","text":"<p>\u6839\u636e\u5f85\u5220\u9664\u8282\u70b9\u7684\u5b50\u6811\u6570\u91cf\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a</p> <ul> <li>\u6ca1\u6709\u5b50\u6811</li> <li>\u4e00\u68f5\u5b50\u6811</li> <li>\u4e24\u68f5\u5b50\u6811</li> </ul>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_11","title":"\u5148\u7ed9\u51fa\u5177\u4f53\u5b9e\u73b0","text":"\u5b9e\u73b01.\u5ac1\u63a5\u5b9e\u73b02.\u540e\u7ee7\u8282\u70b9 <pre><code>// delete \u4f7f\u7528\u300c\u5ac1\u63a5\u300d\u7684\u65b9\u5f0f\u6765\u5220\u9664\nfunc (bst *binarySearchTree) delete(val int)  {\ntgt := bst.root\nif tgt == nil {\nreturn\n}\nvar parent *treeNode = nil\nfor tgt != nil {\n// \u627e\u5230\u76ee\u6807\u8282\u70b9\uff08\u5f85\u5220\u9664\u8282\u70b9\uff09\nif tgt.val == val {\nbreak\n}\nparent = tgt\nif val &lt; tgt.val {\ntgt = tgt.left\n} else {\ntgt = tgt.right\n}\n}\n// \u4e0d\u5b58\u5728\nif tgt == nil {\nreturn\n}\n// \u4e0d\u5b58\u5728\u5b50\u6811\u6216\u8005\u53ea\u6709\u4e00\u68f5\u5b50\u6811\u7684\u60c5\u51b5\n// - \u82e5\u5b58\u5728\u5b50\u6811\uff0c\u5219\u4f7f\u7528\u5b50\u6811\u4ee3\u66ff\u5f85\u5220\u9664\u8282\u70b9\u5373\u53ef\n// - \u5426\u5219\u76f4\u63a5\u5c06\u5f85\u5220\u9664\u8282\u70b9\u5220\u9664\nif tgt.left == nil || tgt.right == nil {\nif tgt.left == nil {\ntgt = tgt.left\n} else {\ntgt = tgt.right\n}\n// \u5b58\u5728\u4e24\u68f5\u5b50\u6811\u7684\u60c5\u51b5\n// child \u4e3a\u53f3\u8282\u70b9\u6839\u8282\u70b9\n} else {\ntmp := tgt.right\n// \u5c06\u5f85\u5220\u9664\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5ac1\u63a5\u5230\u53f3\u5b50\u6811\u7684\u6700\u5de6\u8282\u70b9\nfor tmp.left != nil {\ntmp = tmp.left\n}\ntmp.left = tgt.left\ntgt = tgt.right\n}\nif parent == nil {\nbst.root = tgt\nreturn\n}\nif parent.left != nil &amp;&amp; parent.left.val == val {\nparent.left = tgt\n} else {\nparent.right = tgt\n}\n}\n</code></pre> <pre><code>func (bst *binarySearchTree) delete(num int) {\ncur := bst.root\n// \u82e5\u6811\u4e3a\u7a7a\uff0c\u76f4\u63a5\u63d0\u524d\u8fd4\u56de\nif cur == nil {\nreturn\n}\n// \u5f85\u5220\u9664\u8282\u70b9\u4e4b\u524d\u7684\u8282\u70b9\u4f4d\u7f6e\nvar pre *treeNode = nil\n// \u5faa\u73af\u67e5\u627e\uff0c\u8d8a\u8fc7\u53f6\u8282\u70b9\u540e\u8df3\u51fa\nfor cur != nil {\nif cur.val == num {\nbreak\n}\npre = cur\nif cur.val &lt; num {\n// \u5f85\u5220\u9664\u8282\u70b9\u5728\u53f3\u5b50\u6811\u4e2d\ncur = cur.right\n} else {\n// \u5f85\u5220\u9664\u8282\u70b9\u5728\u5de6\u5b50\u6811\u4e2d\ncur = cur.right\n}\n}\n// \u82e5\u65e0\u5f85\u5220\u9664\u8282\u70b9\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\nif cur == nil {\nreturn\n}\n// \u5b50\u8282\u70b9\u6570\u4e3a 0 \u6216 1\nif cur.left == nil || cur.right == nil {\nvar child *treeNode = nil\n// \u53d6\u51fa\u5f85\u5220\u9664\u8282\u70b9\u7684\u5b50\u8282\u70b9\nif cur.left != nil {\nchild = cur.left\n} else {\nchild = cur.right\n}\n// \u5c06\u5b50\u8282\u70b9\u66ff\u6362\u4e3a\u5f85\u5220\u9664\u8282\u70b9\nif pre.left == cur {\npre.left = child\n} else {\npre.right = child\n}\n// \u5b50\u8282\u70b9\u6570\u4e3a 2\n} else {\n// \u83b7\u53d6\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f85\u5220\u9664\u8282\u70b9 cur \u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\ntmp := cur.right\nfor tmp.left != nil {\ntmp = tmp.left\n}\n// \u9012\u5f52\u5220\u9664\u8282\u70b9 tmp\nbst.remove2(tmp.val)\n// \u7528 tmp \u8986\u76d6 cur\ncur.val = tmp.val\n}\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#0","title":"\u5b50\u6811\u6570\u91cf = 0","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#1","title":"\u5b50\u6811\u6570\u91cf = 1","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#2","title":"\u5b50\u6811\u6570\u91cf = 2","text":"step 1step 2step 3 <p>\u627e\u5230\u76ee\u6807\u8282\u70b9</p> <p> </p> <p>\u5c06 <code>\u76ee\u6807\u8282\u70b9\u7684\u5b57\u6570\u6570\u91cf\u53d8\u6210 1</code> \uff08\u6709\u591a\u79cd\u4e0d\u540c\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u5ac1\u63a5\u7684\u65b9\u5f0f\uff09</p> <p> </p> <p>\u7ecf\u8fc7\u7b2c\u4e8c\u6b65\u7684\u5904\u7406\u4e4b\u540e\uff0c\u5c31\u53d8\u6210\u4e86\u5b50\u6811\u6570\u91cf = 1 \u7684\u60c5\u51b5</p> <p> </p> <p>\u603b\u7ed3\uff1a</p> \u5b50\u6811\u6570\u91cf \u64cd\u4f5c 0 \u76f4\u63a5\u5220\u9664 1 \u5b50\u6811\u4ee3\u66ff\u76ee\u6807\u8282\u70b9 2 \u91cd\u65b0\u6784\u5efa\u5b50\u6811\uff0c\u4f7f\u5176\u53ea\u6709\u4e00\u9897\u5b50\u6811\uff0c\u7136\u540e\u4f7f\u7528\u4e0a\u9762\u65b9\u6cd5","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_12","title":"\u6784\u5efa","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_13","title":"\u5224\u65ad\u662f\u5426\u662f\u4e8c\u53c9\u641c\u7d22\u6811","text":"<pre><code>//\u00a0\u4ece\u4e8c\u53c9\u641c\u7d22\u6811\u5f53\u524d\u8282\u70b9\u7684\u503c\u53ef\u4ee5\u63a8\u51fa\u5de6\u53f3\u8282\u70b9\u7684\u53d6\u503c\u533a\u95f4\uff0c\u9012\u5f52\u5224\u65ad\u6bcf\u4e2a\u8282\u70b9\u5373\u53ef\nfunc\u00a0isValidBST(root\u00a0*TreeNode)\u00a0bool\u00a0{\nif\u00a0root\u00a0==\u00a0nil\u00a0{\nreturn\u00a0true\n}\nreturn\u00a0jud(root,\u00a0math.MinInt,\u00a0math.MaxInt)\n}\nfunc\u00a0jud(root\u00a0*TreeNode,\u00a0start,\u00a0end\u00a0int)\u00a0bool\u00a0{\nif\u00a0root\u00a0==\u00a0nil\u00a0{\nreturn\u00a0true\n}\nif\u00a0root.Val\u00a0&lt;=\u00a0start\u00a0||\u00a0root.Val\u00a0&gt;=\u00a0end\u00a0{\nreturn\u00a0false\n}\nreturn\u00a0jud(root.Left,\u00a0start,\u00a0root.Val)\u00a0&amp;&amp;\u00a0jud(root.Right,\u00a0root.Val,\u00a0end)\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#avl-","title":"\u4e09\u3001AVL - \u4e8c\u53c9\u5e73\u8861\u641c\u7d22\u6811","text":"<p>\u5728\u4e8c\u53c9\u6811\u7684\u57fa\u7840\u4e0a\uff0c\u6ee1\u8db3\u5e73\u8861\u6027</p> <p>\u5e73\u8861\u6027</p> <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\u53ef\u80fd\u9000\u5316\u6210\u7c7b\u4f3c\u94fe\u8868\u7684\u60c5\u51b5\uff0c\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u5f15\u5165\u5e73\u8861\u6027\u3002</p> <p>\u5e73\u8861\u6027\u4f7f\u7528<code>\u5e73\u8861\u56e0\u5b50</code>\u6765\u4f53\u73b0\uff0c\u5e73\u8861\u56e0\u5b50 = <code>|h(ls) - h(rs)|</code></p> <p>\u5373\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u4e0d\u80fd\u8d85\u8fc7 1</p> \u6811\u7c7b\u578b \u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e \u4e8c\u53c9\u641c\u7d22\u6811 <code>O(n)</code>(\u5f53\u6574\u68f5\u6811\u53ea\u6709\u5de6\u8282\u70b9\u6216\u8005\u53ea\u6709\u53f3\u8282\u70b9\u7684\u60c5\u51b5) <code>O(logn)</code> \u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811 <code>O(logn)</code> \u6548\u7387\u66f4\u9ad8(\u90fd\u4e3a<code>O(logn)</code>) <p>\u7a7a\u6811</p> <p>\u7a7a\u6811\u4e5f\u662f\u4e00\u68f5 AVL \u6811</p>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_14","title":"\u8282\u70b9\u9ad8\u5ea6\u3001\u5e73\u8861\u56e0\u5b50","text":"<pre><code>type treeNode struct {  val    int  height int // \u8282\u70b9\u9ad8\u5ea6  \nleft   *treeNode  right  *treeNode  }\n</code></pre> <p>\u8282\u70b9\u9ad8\u5ea6</p> <ul> <li>\u8282\u70b9\u9ad8\u5ea6 \u8868\u793a\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u4e3e\u4f8b\uff08\u4e5f\u5c31\u662f\u8fb9\u7684\u6570\u91cf\uff09</li> <li>\u53f6\u5b50\u8282\u70b9\u7684\u9ad8\u5ea6 = 0</li> <li>\u7a7a\u8282\u70b9\u7684\u9ad8\u5ea6 = -1</li> </ul> <p><code>\u83b7\u53d6\u8282\u70b9\u9ad8\u5ea6</code> <code>\u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6</code>\uff1a</p> <pre><code>func (t *avlTree) getHeight(node *treeNode) int {  // \u7a7a\u8282\u70b9\u9ad8\u5ea6\u4e3a -1   if node == nil {  \nreturn -1  }  return node.height  }  func (t *avlTree) updateHeight(node *treeNode) {  // \u8282\u70b9\u9ad8\u5ea6\u7b49\u4e8e\u6700\u9ad8\u5b50\u6811\u7684\u9ad8\u5ea6 + 1   \nt.height = max(t.getHeight(node.left), t.getHeight(node.right)) + 1  }\n</code></pre> <p><code>\u83b7\u53d6\u8282\u70b9\u5e73\u8861\u56e0\u5b50</code></p> <pre><code>// balanceFactor \u83b7\u53d6\u5e73\u8861\u56e0\u5b50  \n// \u8bbe\u5e73\u8861\u56e0\u5b50\u4e3a f\uff0c\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5e73\u8861\u56e0\u5b50\u9700\u6ee1\u8db3\uff1a-1 &lt;= f &lt;= 1  \nfunc (t *avlTree) balanceFactor(node *treeNode) int {  // \u7a7a\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u4e3a 0   \nif node == nil {  return 0  }  // \u8282\u70b9\u5e73\u8861\u56e0\u5b50 = \u5de6\u5b50\u6811\u9ad8\u5ea6 - \u53f3\u5b50\u6811\u9ad8\u5ea6  \nreturn t.getHeight(node.left) - t.getHeight(node.right)  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_15","title":"\u56db\u79cd\u65cb\u8f6c\u7c7b\u578b","text":"<p>AVL \u7684\u7279\u70b9\u5c31\u5728\u4e8e\u65cb\u8f6c\uff08Roration\uff09\uff0c\u901a\u8fc7\u65cb\u8f6c\u53ef\u4ee5\u8ba9\u4e8c\u53c9\u6811\u4e0d\u5931\u8861\uff0c\u6839\u636e\u8282\u70b9\u7684\u5931\u8861\u60c5\u51b5\uff0c\u53ef\u4ee5\u5c06\u5206\u4e3a\u56db\u79cd\u65cb\u8f6c\u65b9\u5f0f\uff1a<code>\u5de6\u65cb</code>\u3001<code>\u53f3\u65cb</code>\u3001<code>\u5148\u5de6\u65cb\u518d\u53f3\u65cb</code>\u3001<code>\u5148\u53f3\u65cb\u518d\u5de6\u65cb</code></p>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_16","title":"\u5de6\u65cb","text":"<p>\u5177\u4f53\u56fe\u793a\u5206\u6790\u4e0e\u53f3\u65cb\u7c7b\u4f3c</p> <pre><code>func (t *avlTree) leftRotate(node *treeNode) *treeNode  {  child := node.right  // \u6d88\u9664\u78b0\u649e\uff0c\u6267\u884c\u65cb\u8f6c  \nnode.right = child.left  child.left = node  // \u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6  \nt.updateHeight(node)  t.updateHeight(child)  return child  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_17","title":"\u53f3\u65cb","text":"step 1 \u6dfb\u52a0\u8282\u70b9step 2 \u5931\u8861step 3 \u805a\u7126step 4 \u65cb\u8f6cstep 5 \u5b50\u8282\u70b9\u4e0a\u79fb <p>\u6dfb\u52a0\u8282\u70b9\u4e4b\u540e\u5931\u8861 </p> <p>\u805a\u7126\u5931\u8861\u7684\u5b50\u6811  </p> <p> </p> <p>\u78b0\u649e</p> <p>\u8fd9\u91cc\u7684 <code>child</code> \u8282\u70b9\u662f\u6ca1\u6709\u53f3\u8282\u70b9\u7684\uff0c\u56e0\u6b64 <code>node</code> \u8282\u70b9\u7684\u53f3\u65cb\u8fc7\u7a0b\u662f\u987a\u5229\u7684\u3002\u5728\u53f3\u65cb\u64cd\u4f5c\u4e2d\uff0c\u5982\u679c <code>child</code> \u5b58\u5728\u53f3\u8282\u70b9\uff0c\u662f\u4f1a\u4ea7\u751f\u78b0\u649e\uff08\u78b0\u649e\u53ea\u662f\u4e3a\u4e86\u4e2a\u4eba\u65b9\u4fbf\u8bb0\u4f4f\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\u5f15\u5165\u7684\u4e00\u4e2a\u6982\u5ff5\uff09\u7684\uff0c\u90a3\u4e48\u5728\u65cb\u8f6c\u4e4b\u524d\uff0c\u5c31\u5fc5\u987b\u6d88\u9664\u78b0\u649e\uff1a\u8ba9 <code>grandchild</code> \u4f5c\u4e3a <code>node</code> \u7684\u5de6\u8282\u70b9</p> <p>\u4e00\u4e2a\u6709\u78b0\u649e\u7684\u4f8b\u5b50\uff1a</p> <p> </p> <p> </p> <pre><code>// \u53f3\u65cb\uff0c\u8fd4\u56de\u5e73\u8861\u5b50\u6811\u7684\u6839\u8282\u70b9  \nfunc (t *avlTree) rightRotate(node *treeNode) *treeNode {  child := node.left  // \u6d88\u9664\u78b0\u649e\uff0c\u6267\u884c\u65cb\u8f6c  \nnode.left = child.right  child.right = node  // \u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6  \nt.updateHeight(node)  t.updateHeight(child)  return child  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_18","title":"\u5148\u5de6\u65cb\u540e\u53f3\u65cb","text":"<p>\u4e0b\u9762\u662f\u540c\u6837\u7684\u4e00\u9897 AVL \u6811\uff0c\u5982\u679c\u65b0\u8282\u70b9\u6dfb\u52a0\u5728\u6700\u5de6\u53f6\u5b50\u8282\u70b9\u7684\u5de6\u8282\u70b9\uff0c\u662f\u80fd\u591f\u901a\u8fc7\u4e00\u6b21\u53f3\u65cb\u64cd\u4f5c\u6062\u590d\u5e73\u8861\u7684\uff0c\u4f46\u662f\u5982\u679c\u65b0\u8282\u70b9\u6dfb\u52a0\u5728\u6700\u5de6\u53f6\u5b50\u8282\u70b9\u7684\u53f3\u8282\u70b9\uff0c\u9700\u8981\u5148\u901a\u8fc7\u4e00\u6b21<code>\u5de6\u65cb</code>\uff08\u8fd9\u6b21\u5de6\u65cb\u662f\u4e0d\u4f1a\u4ea7\u751f\u78b0\u649e\u7684\uff09\u8fbe\u5230\u7c7b\u4f3c\u4e8e\u65b0\u8282\u70b9\u662f\u6dfb\u52a0\u5728\u6700\u5de6\u8fb9\u7684\u6548\u679c\uff0c\u7136\u540e\u5c31\u80fd\u901a\u8fc7\u4e0a\u9762\u63d0\u5230\u7684<code>\u53f3\u65cb</code>\u64cd\u4f5c\u6765\u6062\u590d\u5e73\u8861</p> <p> </p>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_19","title":"\u5148\u53f3\u65cb\u540e\u5de6\u65cb","text":"<p>\u76f8\u5f53\u4e8e\u300c\u5148\u5de6\u65cb\u540e\u53f3\u65cb\u300d\u7684\u955c\u50cf\u64cd\u4f5c</p>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_20","title":"\u300c\u65cb\u8f6c\u300d\u603b\u7ed3","text":"<p>\u8bbe\u5e73\u8861\u56e0\u5b50\u4e3a f - \u5de6\u504f\u6811\uff1af &gt; 1 - \u53f3\u504f\u6811\uff1af &lt; -1</p> <p>\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5206\u522b\u5224\u65ad node \u548c child \u7684\u5e73\u8861\u56e0\u5b50\u6765\u9009\u62e9\u6267\u884c\u54ea\u79cd\u65cb\u8f6c\u64cd\u4f5c</p> \u5931\u8861\u8282\u70b9\u7684 f \u5b50\u8282\u70b9\u7684 f \u64cd\u4f5c &gt; 1 &gt;= 0 \u53f3\u65cb &gt; 1 &lt; 0 \u5148\u5de6\u65cb\u540e\u53f3\u65cb &lt; -1 &lt;= 0 \u5de6\u65cb &lt; -1 &gt; 0 \u5148\u53f3\u65cb\u540e\u5de6\u65cb <pre><code>func (t *avlTree) rotate(node *treeNode) *treeNode {  // \u5931\u8861\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50  \nbf := t.balanceFactor(node)  if bf &gt; 1 {  if t.balanceFactor(node.left) &gt;= 0 {  return t.rightRotate(node)  } else {  // \u5148\u5de6\u65cb\uff0c\u540e\u53f3\u65cb  \nnode.left = t.leftRotate(node.left)  return t.rightRotate(node)  }  } else if bf &lt; -1 {  if t.balanceFactor(node.right) &lt;= 0 {  return t.leftRotate(node)  } else {  // \u5148\u53f3\u65cb\uff0c\u540e\u5de6\u65cb  \nnode.right = t.rightRotate(node.right)  return t.leftRotate(node)  }  }  // \u5df2\u7ecf\u662f\u5e73\u8861\u72b6\u6001  \nreturn node  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_21","title":"\u63d2\u5165\u8282\u70b9","text":"<p>\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\u5728\u8282\u70b9\u63d2\u5165\u4e4b\u540e\u8981\u7ef4\u6301\u6811\u7684\u5e73\u8861\uff0c\u4ece\u63d2\u5165\u7684\u8282\u70b9\u5f00\u59cb\uff0c\u9700\u8981 <code>\u81ea\u5e95\u5411\u4e0a\u6267\u884c\u65cb\u8f6c\u64cd\u4f5c\uff0c\u4f7f\u6240\u6709\u5931\u8861\u8282\u70b9\u6062\u590d\u5e73\u8861</code> </p> <pre><code>func (t *avlTree) insert(val int)  {  t.root = t.insertHelper(t.root, val)  }  func (t *avlTree) insertHelper(node *treeNode, val int) *treeNode {  if node == nil {  return &amp;treeNode{  val: val,  }  }  /* 1. \u63d2\u5165 */   if val &lt; node.val {  node.left = t.insertHelper(node.left, val)  } else if val &gt; node.val {  node.right = t.insertHelper(node.right, val)  } else {  // \u91cd\u590d\u8282\u70b9\u4e0d\u63d2\u5165  \nreturn node  }  // \u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6  \nt.updateHeight(node)  /* 2.\u6267\u884c\u65cb\u8f6c\uff0c\u6062\u590d\u5e73\u8861 */   node = t.rotate(node)  return node  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_22","title":"\u5220\u9664\u8282\u70b9","text":"<pre><code>func (t *avlTree) remove(val int)  {  t.removeHelper(t.root, val)  }  func (t *avlTree) removeHelper(node *treeNode, val int) *treeNode {  if node == nil {  return nil  }  if val &lt; node.val {  node.left = t.removeHelper(node.left, val)  } else if val &gt; node.val {  node.right = t.removeHelper(node.right, val)  } else {  if node.left == nil || node.right == nil {  child := node.left  if node.right != nil {  child = node.right  }  if child == nil {  // \u6ca1\u6709\u5b50\u6811\uff0c\u76f4\u63a5\u5220\u9664\u8282\u70b9\u5373\u53ef  \nreturn nil  } else {  // \u6709\u81f3\u591a\u4e00\u4e2a\u8282\u70b9\uff0c\u8fd4\u56de\u8be5\u8282\u70b9  \nreturn child  }  } else {  // \u5b50\u8282\u70b9\u7684\u6570\u91cf\u4e3a 2\uff0c\u5220\u9664\u5f53\u524d\u8282\u70b9\u7684\u540e\u7ee7\u8282\u70b9\uff0c\u5e76\u7528\u540e\u7ee7\u8282\u70b9\u7684\u503c\u66ff\u6362\u5f53\u524d\u8282\u70b9  \ntmp := node.right  for tmp.left != nil {  tmp = tmp.left  }  // \u9012\u5f52\u5220\u9664\u8fd9\u4e2a\u540e\u7ee7\u8282\u70b9  \nnode.right = t.removeHelper(node.right, tmp.val)  // \u66ff\u6362\u5f53\u524d\u8282\u70b9  \nnode.val = tmp.val  }  }  // \u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6  \nt.updateHeight(node)  /* \u6267\u884c\u65cb\u8f6c\uff0c\u4fdd\u6301\u5e73\u8861 */   node = t.rotate(node)  return node  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270210%20%E6%A0%91-%E5%AD%A6%E4%B9%A0/#_23","title":"(\u5f85\u8865\u5145...)","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E5%9B%BE-%E5%AD%A6%E4%B9%A0/","title":"\u56fe\u300c\u5b66\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E5%9B%BE-%E5%AD%A6%E4%B9%A0/#_1","title":"\u56fe","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E5%9B%BE-%E5%AD%A6%E4%B9%A0/#_2","title":"\u6982\u5ff5","text":"<p>\u5b9a\u4e49\uff1aG = (V, E)</p> <p> </p> <p>\u56fe\u7684\u5206\u7c7b</p> \u8fb9\u662f\u5426\u6709\u65b9\u5411\u662f\u5426\u6709\u73af\u8fde\u901a\u3001\u975e\u8fde\u901a\u8fb9\u662f\u5426\u6709\u6743\u91cd <p> </p> <p> </p> <p> </p> <p> </p>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E5%9B%BE-%E5%AD%A6%E4%B9%A0/#_3","title":"\u8868\u793a","text":"<ul> <li>\u987a\u5e8f</li> <li>\u94fe\u5f0f</li> </ul> <p>\u4e00\u4e2a\u65e0\u5411\u56fe\u7684\u4f8b\u5b50\uff0c\u5c55\u793a\u5982\u4f55\u7528\u300c\u90bb\u63a5\u77e9\u9635\u300d\u548c\u300c\u90bb\u63a5\u8868\u300d\u6765\u8868\u793a\u4e00\u4e2a\u56fe\uff1a</p> <p> </p> <p>\u90bb\u63a5\u77e9\u9635\u4e2d\u4fdd\u5b58\u7740\u5f88\u591a\u4e0d\u5b58\u5728\u7684\u8fb9\uff0c\u7531\u4e8e\u4e8c\u7ef4\u6570\u7ec4\u7684\u8fde\u7eed\u6027\uff0c\u4f1a\u6d6a\u8d39\u5f88\u591a\u7a7a\u95f4\uff0c\u4f46\u662f\u67e5\u8be2\u901f\u5ea6\u5feb O(1)\uff1b\u5728\u90bb\u63a5\u8868\u4e2d\uff0c\u91c7\u7528\u4e86\u4e00\u4e2a\u6570\u7ec4\u6765\u4fdd\u5b58\u56fe\u7684\u6240\u6709\u70b9\uff0c\u6bcf\u4e2a\u5143\u7d20\u6269\u5c55\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u53ea\u4fdd\u5b58\u5b58\u5728\u7684\u8fb9\uff0c\u8282\u7701\u7a7a\u95f4\uff0c\u4f46\u662f\u67e5\u8be2\u6548\u7387 O(n)\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u624b\u6bb5\u6765\u4f18\u5316\u8fd9\u4e2a\u94fe\u8868\uff0c\u6bd4\u5982\u5c06\u94fe\u8868\u8f6c\u5316\u4e3a AVL \u6216\u8005 \u7ea2\u9ed1\u6811\uff0c\u67e5\u8be2\u6548\u7387\u80fd\u591f\u4f18\u5316\u5230 O(logn)\uff0c\u6216\u8005\u91c7\u7528\u54c8\u5e0c\u8868\uff0c\u518d\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u81f3 O(1)</p> \u4f7f\u7528 map \u5b9e\u73b0\u65e0\u5411\u56fe <pre><code>type vertex struct {  val int  }  /* \u57fa\u4e8e\u90bb\u63a5\u8868\u5b9e\u73b0\u7684\u65e0\u5411\u56fe */\ntype graphAdjMp struct {  adjMp map[vertex]map[vertex]struct{}  }  func (g *graphAdjMp) addVertex(v vertex)  {  if _, ok := g.adjMp[v]; ok {  // \u8be5\u9876\u70b9\u5df2\u7ecf\u5b58\u5728\uff0c\u65e0\u9700\u91cd\u590d\u52a0\u5165  \nreturn  }  // \u65b0\u52a0\u4e00\u4e2a\u8282\u70b9\uff0c\u4ee5\u53ca\u521d\u59cb\u5316\u4e00\u4e2a\u94fe\u8868  \ng.adjMp[v] = map[vertex]struct{}{}  }  func (g *graphAdjMp) deleteVertex(v vertex)  {  if _, ok := g.adjMp[v]; !ok {  // \u8282\u70b9\u662f\u4e0d\u5b58\u5728\u7684  \nreturn  }  /* 1.\u5220\u9664\u9876\u70b9 */   delete(g.adjMp, v)  /* 2.\u5220\u9664\u5176\u4ed6\u9876\u70b9\u4e2d\u4e0e\u4e4b\u5b58\u5728\u7684\u5173\u8054 */   for _, rt := range g.adjMp {  delete(rt, v)  }  }  func (g *graphAdjMp) addEdge(v1, v2 vertex)  {  _, ok1 := g.adjMp[v1]  _, ok2 := g.adjMp[v2]  if !ok1 || !ok2 || v1 == v2 {  log.Fatal(\"add edge error\")  }  g.adjMp[v1][v2] = struct{}{}  g.adjMp[v2][v1] = struct{}{}  }  func (g *graphAdjMp) deleteEdge(v1, v2 vertex) {  _, ok1 := g.adjMp[v1]  _, ok2 := g.adjMp[v2]  if !ok1 || !ok2 || v1 == v2 {  log.Fatal(\"delete edge error\")  }  delete(g.adjMp[v1], v2)  delete(g.adjMp[v2], v1)  }  // newGraphAdjMp \u4f7f\u7528\u8fb9\u6765\u521d\u59cb\u5316\u4e00\u4e2a\u56fe  \n// edges \u7684\u5f62\u5f0f\u5e94\u8be5\u662f [(v1,v2),(v1,v3)...]\nfunc newGraphAdjMp(edges [][]vertex) *graphAdjMp {  g := &amp;graphAdjMp{  adjMp: make(map[vertex]map[vertex]struct{}),  }  for _, e := range edges {  g.addVertex(e[0])  g.addVertex(e[1])  g.addEdge(e[0], e[1])  }  return g  }  func (g *graphAdjMp) print()  {  if g.adjMp == nil {  fmt.Println(\"graph is nil\")  }  for vt, toMp := range g.adjMp {  fmt.Print(\"vertex#\", vt, \"have edge: \")  for toVt := range toMp {  fmt.Print(\"(\", vt.val, toVt.val, \")\")  }  fmt.Println()  }  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E5%9B%BE-%E5%AD%A6%E4%B9%A0/#_4","title":"\u56fe\u7684\u904d\u5386","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E5%9B%BE-%E5%AD%A6%E4%B9%A0/#dfs","title":"\u6df1\u5ea6\u4f18\u5148\uff08DFS\uff09","text":"<pre><code>func (g *graphAdjMp) dfs(startVt vertex) []vertex {  visited := make(map[vertex]struct{})  var visitRst []vertex  g.dfsHelper(startVt, visited, &amp;visitRst)  return visitRst  }  func (g *graphAdjMp) dfsHelper(startVt vertex, visited map[vertex]struct{}, visitRst *[]vertex)  {  *visitRst = append(*visitRst, startVt)  visited[startVt] = struct{}{}  for toVt := range g.adjMp[startVt] {  if _, ok := visited[toVt]; ok {  continue  }  g.dfsHelper(toVt, visited, visitRst)  }  }\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E5%9B%BE-%E5%AD%A6%E4%B9%A0/#bfs","title":"\u5e7f\u5ea6\u4f18\u5148\uff08BFS\uff09","text":"<pre><code>func (g *graphAdjMp) bfs(startVt vertex) []vertex {  if g.adjMp == nil {  fmt.Println(\"graph is nil\")  }  var queue []vertex  visited := make(map[vertex]struct{})  var visitRst []vertex  // visitRst \u7528\u6765\u5b58\u50a8\u8bbf\u95ee\u7ed3\u679c  \nvisitRst = append(visitRst, startVt)  // \u6807\u8bb0\u5df2\u7ecf\u8bbf\u95ee  \nvisited[startVt] = struct{}{}  queue = append(queue, startVt)  for len(queue) &gt; 0 {  cur := queue[0]  queue = queue[1:]  // \u904d\u5386\u76f8\u90bb\u8282\u70b9\uff0c\u5982\u679c\u8fd8\u6ca1\u8bbf\u95ee\uff0c\u5c31\u8bbf\u95ee\uff0c\u5e76\u52a0\u5165\u961f\u5217  \nfor toVt, _ := range g.adjMp[cur] {  if _, ok := visited[toVt]; ok {  // \u8282\u70b9\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u8df3\u8fc7  \ncontinue  }  visitRst = append(visitRst, toVt)  visited[toVt] = struct{}{}  queue = append(queue, toVt)  }  }  return visitRst  }\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6240\u6709\u7684\u8282\u70b9\u90fd\u4f1a\u5165\u961f\u5217\u4e00\u6b21\uff0c\u65f6\u95f4 O(|V|)\uff0c\u6bcf\u6761\u8fb9\u90fd\u4f1a\u904d\u5386\u4e24\u6b21\uff0c\u65f6\u95f4 O(2|E|)\uff0c\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6 O(|V|+|E|)</p> <ol> <li>https://www.hello-algo.com/chapter_graph/graph_traversal/#932</li> </ol>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/","title":"\u6811\u300c\u7ec3\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#_1","title":"\u6811\u7684\u5e38\u89c4\u64cd\u4f5c","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#_2","title":"\u6811\u7684\u904d\u5386","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#_3","title":"\u5148\u5e8f\u904d\u5386","text":"<ul> <li>22. \u62ec\u53f7\u751f\u6210</li> </ul> code <p>\u4f7f\u7528\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386\u7684\u65b9\u6cd5</p> <pre><code>func generateParenthesis(n int) []string {\nvar path []byte\nans := make([]string, 0)\ndlr(path, '(', n, &amp;ans)\nreturn ans\n}\nfunc dlr(path []byte, ch byte, n int, ans *[]string) {\n// \u8bbf\u95ee\u8282\u70b9\npath = append(path, ch)\nif len(path) == n*2 {\nif isValid(path) {\n*ans = append(*ans, string(path))\n}\nreturn\n}\ndlr(path, '(', n, ans)\ndlr(path, ')', n, ans)\nreturn\n}\nfunc isValid(pat []byte) bool {\nvar stack []byte\nfor i := 0; i &lt; len(pat); i++ {\nif len(stack) != 0 &amp;&amp; stack[len(stack)-1] == '(' &amp;&amp; pat[i] == ')' {\nstack = stack[:len(stack)-1]\n} else {\nstack = append(stack, pat[i])\n}\n}\nreturn len(stack) == 0\n}\n</code></pre> <p>\u8fd9\u6837\u505a\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u5de5\u4f5c,\u5047\u8bbe\u5f53 n = 2,\u53ef\u4ee5\u770b\u6210\u8fd9\u6837\u4e00\u68f5\u4e8c\u53c9\u6811</p> <p> </p> <p>\u603b\u5171\u4f1a\u8d70 2^(2n-1) = 8 \u6761\u8def\u5f84,\u4f46\u662f\u53ea\u6709 2 \u6761\u662f\u7b26\u5408\u6761\u4ef6\u7684</p> <p>\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u89c4\u5f8b:</p> <ul> <li>\u5982\u679c\u5de6\u62ec\u53f7\u7b49\u4e8e n \u4e86,\u4e4b\u540e\u5c31\u53ea\u80fd\u9009\u62e9\u53f3\u62ec\u53f7</li> <li>\u5982\u679c\u76ee\u524d\u7684\u72b6\u6001\u4e2d,\u5de6\u62ec\u53f7\u7684\u6570\u91cf\u6bd4\u53f3\u62ec\u53f7\u5c11,\u90a3\u4e48\u4e00\u5b9a\u662f\u4e0d\u7b26\u5408\u6761\u4ef6\u7684,\u56e0\u4e3a\u6700\u540e\u4e00\u5b9a\u6709\u4e00\u4e2a\u5de6\u62ec\u53f7\u662f\u6ca1\u6709\u53f3\u62ec\u53f7\u5339\u914d\u7684,\u6240\u4ee5\u5982\u679c\u73b0\u5728\u7684\u53f3\u62ec\u53f7\u7b49\u4e8e\u5de6\u62ec\u53f7,\u90a3\u4e48\u4e0b\u4e00\u4e2a\u53ea\u80fd\u9009\u62e9\u5de6\u62ec\u53f7</li> </ul> <p>\u4f18\u5316\u7684\u4ee3\u7801:</p> <pre><code>func generateParenthesis(n int) []string {\nvar path []byte\nans := make([]string, 0)\n// \u65b0\u589e\u4e00\u4e2a\u6570\u7ec4\u6765\u4fdd\u5b58\u5f53\u524d\u72b6\u6001\u5de6\u62ec\u53f7\u548c\u53f3\u62ec\u53f7\u7684\u6570\u91cf\nxy := [2]uint8{0, 0}\nxy[0] = 1\ndlr(path, xy[:], '(', uint8(n), &amp;ans)\nreturn ans\n}\nfunc dlr(path []byte, xy []uint8, ch byte, n uint8, ans *[]string) {\npath = append(path, ch)\nif len(path) == int(n*2) {\n*ans = append(*ans, string(path))\n}\n// \u5de6\u62ec\u53f7\u7684\u6570\u91cf &lt; n \u7684\u65f6\u5019\uff0c\u624d\u80fd\u7ee7\u7eed\u9009\u62e9\u5de6\u62ec\u53f7\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u7b26\u53f7\nif xy[0] &lt; n {\nxy[0]++\ndlr(path, xy, '(', n, ans)\nxy[0]--\n}\n// \u53ea\u6709\u5f53\u53f3\u62ec\u53f7 &lt; \u5de6\u62ec\u53f7\uff0c\u4e0b\u4e00\u4e2a\u624d\u6709\u53ef\u80fd\u9009\u53f3\u62ec\u53f7\nif xy[1] &lt; xy[0] {\nxy[1]++\ndlr(path, xy, ')', n, ans)\nxy[1]--\n}\nreturn\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#_4","title":"\u4e8c\u53c9\u6811","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#_5","title":"\u6839\u636e\u8f93\u51fa\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#105","title":"105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811","text":"code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc buildTree(preorder []int, inorder []int) *TreeNode {\nif len(preorder) == 0 {\nreturn nil\n}\nrootIdx1 := 0\nrootIdx2 := indexOf(inorder, preorder[rootIdx1])\nroot := &amp;TreeNode{\nVal: preorder[rootIdx1],\n}\ninorder1 := inorder[0:rootIdx2]\ninorder2 := inorder[rootIdx2 + 1:]\npreorder1 := preorder[1: 1 + len(inorder1)]\npreorder2 := preorder[1+len(inorder1):]\nleft := buildTree(preorder1, inorder1)\nright := buildTree(preorder2, inorder2)\nroot.Left = left\nroot.Right = right\nreturn root\n}\nfunc indexOf(nums []int, tgt int) int {\nfor i, num := range nums {\nif tgt == num {\nreturn i\n}\n}\nreturn -1\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#_6","title":"\u5176\u4ed6\u95ee\u9898","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#101","title":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811","text":"code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSymmetric(root *TreeNode) bool {\nif root == nil {\nreturn true\n}\nvar q []*TreeNode\nq = append(q, root)\nfor len(q) &gt; 0 {\nvar nums []int\n// get head\nn := len(q)\nfor i := 0; i &lt; n; i++ {\nif q[i] != nil {\nnums = append(nums, q[i].Val)\nq = append(q, q[i].Left)\nq = append(q, q[i].Right)\n} else {\nnums = append(nums, -101)\n}\n}\nq = q[n:]\n// jud\nfor i, n := 0, len(nums); i &lt; n / 2; i++ {\nif nums[i] != nums[n-i-1] {\nreturn false\n}\n}\n}\nreturn true\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#112","title":"112. \u8def\u5f84\u603b\u548c","text":"code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc hasPathSum(root *TreeNode, targetSum int) bool {\nif root == nil {\nreturn false\n}\nreturn havePathToLeaf(root, targetSum)\n}\nfunc havePathToLeaf(root *TreeNode, tgtSum int) bool {\n// end\nif root.Left == nil &amp;&amp; root.Right == nil {\nreturn root.Val == tgtSum\n}\nhave1, have2 := false, false\nif root.Left != nil {\nhave1 = havePathToLeaf(root.Left, tgtSum - root.Val)\n}\nif root.Right != nil {\nhave2 = havePathToLeaf(root.Right, tgtSum - root.Val)\n}\nreturn have1 || have2\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#113-ii","title":"113. \u8def\u5f84\u603b\u548c II","text":"code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc pathSum(root *TreeNode, targetSum int) [][]int {\nvar st []*TreeNode\nvar ans [][]int\nif root == nil {\nreturn ans\n}\ntmpRoot := root\npre := root\nfor len(st) &gt; 0 || tmpRoot != nil {\nfor tmpRoot != nil {\nst = append(st, tmpRoot)\ntmpRoot = tmpRoot.Left\n}\ntmpRoot = st[len(st)-1]\nif tmpRoot.Right == nil || tmpRoot.Right == pre {\n// visit\nif tmpRoot.Left == nil &amp;&amp; tmpRoot.Right == nil {\nsum := 0\nvar path []int\nfor _, node := range st {\nsum += node.Val\npath = append(path, node.Val)\n}\nif sum == targetSum {\nans = append(ans, path)\n}\n}\nst = st[:len(st)-1]\npre = tmpRoot\ntmpRoot = nil\n} else {\ntmpRoot = tmpRoot.Right\n}\n} return ans\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#236","title":"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\nif root == nil {\nreturn nil\n}\nvar st []*TreeNode\nvar path1, path2 []int\ntmpRoot := root\npre := root\nfor len(st) &gt; 0 || tmpRoot != nil {\nfor tmpRoot != nil {\nst = append(st, tmpRoot)\ntmpRoot = tmpRoot.Left\n}\n// get\ntmpRoot = st[len(st) - 1]\nif tmpRoot.Right == nil || pre == tmpRoot.Right {\n// visit\nif tmpRoot.Val == p.Val {\nfor _, node := range st {\npath1 = append(path1, node.Val)\n}\n}\nif tmpRoot.Val == q.Val {\nfor _, node := range st {\npath2 = append(path2, node.Val)\n}\n}\nst = st[:len(st)-1]\npre = tmpRoot\ntmpRoot = nil\n} else {\ntmpRoot = tmpRoot.Right\n}\n}\nvalIdx := map[int]int{}\nidxMax := math.MinInt\nfor i, val := range path1 {\nvalIdx[val] = i\n}\nfor _, val := range path2 {\nif i, ok := valIdx[val]; ok &amp;&amp; idxMax &lt; i {\nidxMax = i\n}\n}\nreturn &amp;TreeNode{\nVal: path1[idxMax],\n}\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#199","title":"199. \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe","text":"code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc rightSideView(root *TreeNode) []int {\nvar ans []int\nif root == nil {\nreturn ans\n}\nvar st []*TreeNode\ntmpNode := root\npre := root\nfor len(st) &gt; 0 || tmpNode != nil {\nfor tmpNode != nil {\nst = append(st, tmpNode)\nif len(st) &gt; len(ans) {\nans = append(ans, tmpNode.Val)\n}\ntmpNode = tmpNode.Right\n}\n// \u5224\u65ad\u662f\u5426\u8be5\u8bbf\u95ee\u8be5\u8282\u70b9\ntmpNode = st[len(st)-1]\nif tmpNode.Left == nil || tmpNode.Left == pre {\npre = tmpNode\ntmpNode = nil\nst = st[:len(st)-1]\n} else {\ntmpNode = tmpNode.Left\n}\n}\nreturn ans\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#958","title":"958. \u4e8c\u53c9\u6811\u7684\u5b8c\u5168\u6027\u68c0\u9a8c","text":"code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n// bfs\n// \u7b2c\u4e00\u5c42 1    2\u76840\u6b21\u65b9\n// \u7b2c\u4e8c\u5c42 2    2\u76841\u6b21\u65b9\n// ...\n// \u904d\u5386\u6bcf\u4e00\u5c42\u7684\u7684\u65f6\u5019\uff0c\u8ba1\u7b97\u4e0b\u4e00\u5c42\u7684\u8282\u70b9\u6570\u91cf\uff0c\u5982\u679c\u4e0d\u7b49\u4e8e 2 \u7684 n \u6b21\u65b9\uff0c\u5224\u65ad\u5f53\u524d\u5c42\u7684\u5b50\u6811\u60c5\u51b5\n// \u8bbe\u5b9a\u8282\u70b9\u7684\u51e0\u4e2a\u72b6\u6001\uff1a\n// \u6709\u5de6\u53f3\u8282\u70b9\uff1a    3\n// \u6709\u5de6\u8282\u70b9\uff1a      2\n// \u6709\u53f3\u8282\u70b9\uff1a      9\n// \u6ca1\u6709\u5b50\u8282\u70b9\uff1a    0\n// \u90a3\u4e48\uff1a  3 \u540e\u9762\u5fc5\u987b\u662f    3\u30012\u30010\n//         2 \u540e\u9762\u5fc5\u987b\u662f    0\n//         0 \u540e\u9762\u5fc5\u987b\u662f    0\n//         \u5982\u679c\u5305\u542b 9 \u5219\u4e0d\u5b8c\u5168\n// \u6216\u8005\u8bf4\uff1a    3 \u524d\u9762\u5fc5\u987b\u662f    3\n//             2 \u524d\u9762\u5fc5\u987b\u662f    3\n//             0 \u524d\u9762\u5fc5\u987b\u662f    3 \u6216\u80052\nfunc isCompleteTree(root *TreeNode) bool {\nif root == nil || root.Left == nil &amp;&amp; root.Right == nil {\nreturn true\n}\nvar q []*TreeNode\nq = append(q, root)\nnextLevelNum := 2\npreState := 3    // \u5047\u8bbe\u5728\u524d\u9762\u8865\u5145\u4e00\u4e2a\u72b6\u6001\u6700\u597d\u7684\u8282\u70b9\n//curLevelFull := true\nfor len(q) &gt; 0 {\nwidth := len(q)\nchildNum := 0\nfor i:=0; i&lt;width; i++ {\nnode := q[i]\nnodeState := 3\nif node.Left != nil &amp;&amp; node.Right != nil {\nnodeState = 3\nchildNum += 2\nq = append(q, node.Left)\nq = append(q, node.Right)\n} else if node.Left != nil {\nnodeState = 2\nchildNum += 1\nq = append(q, node.Left)\n} else if node.Right != nil {\nnodeState = 9\nchildNum += 1\nq = append(q, node.Right)\n} else if node.Left == nil &amp;&amp; node.Right == nil {\nnodeState = 0\n}\n//\nif nodeState == 9 {\nreturn false\n}\nif nodeState == 3 &amp;&amp; preState != 3 {\nreturn false\n}\nif nodeState == 2 &amp;&amp; preState != 3 {\nreturn false\n}\nif nodeState == 0 &amp;&amp; preState == 3 || preState == 2{\n//\n}\npreState = nodeState\n}\n//if childNum != nextLevelNum &amp;&amp; !curLevelFull {\n//  return false\n//}\n//if childNum != nextLevelNum {\n//  curLevelFull = false\n//}\nnextLevelNum *= 2\nq = q[width:]\n}\nreturn true\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#572","title":"572. \u53e6\u4e00\u68f5\u6811\u7684\u5b50\u6811","text":"code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n// \u901a\u8fc7\u6811\u7684\u5148\u5e8f\u904d\u5386\n// \u8865\u5145\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u8ba9\u5ea6\u4e3a2\uff0c\u8f93\u51fa\u6811\u7684\u5148\u5e8f\u904d\u5386\n// \u5224\u65ad\u4e3b\u6811\u7684\u5e8f\u5217\u5305\u542b\u5b50\u6811\u7684\u5e8f\u5217\nfunc isSubtree(root *TreeNode, subRoot *TreeNode) bool {\nnums1 := dlrNums(root)\nnums2 := dlrNums(subRoot)\nreturn kmpSearch(nums1, nums2)\n}\nconst lrNilVal = -10001\nvar leftNilNode = TreeNode{\nVal: lrNilVal,\n}\nvar rightNilNode = TreeNode{\nVal: lrNilVal,\n}\nfunc dlrNums(root *TreeNode) []int {\nvar nums []int\nif root == nil {\nreturn nums\n}\nvar st []*TreeNode\nst = append(st, root)\ntmpRoot := root\nfor len(st) &gt; 0 {\n// pop\ntmpRoot = st[len(st) - 1]\nst = st[:len(st) - 1]\n// visit\nnums = append(nums, tmpRoot.Val)\nif tmpRoot.Val != lrNilVal &amp;&amp; tmpRoot.Left == nil {\ntmpRoot.Left = &amp;leftNilNode\n}\nif tmpRoot.Val != lrNilVal &amp;&amp; tmpRoot.Right == nil {\ntmpRoot.Right = &amp;rightNilNode\n}\nif tmpRoot.Right != nil {\nst = append(st, tmpRoot.Right)\n}\nif tmpRoot.Left != nil {\nst = append(st, tmpRoot.Left)\n}\n}\nreturn nums\n}\n//  i\n//  nums a  a   b   a   a   b   a   a   c\n//  pat\n//  j\nfunc kmpSearch(nums, pat []int) bool {\nnext := getNext(pat)\nj := 0\nfor i := 0; j &lt; len(pat) &amp;&amp; i &lt; len(nums); i++ {\nfor ; j &gt; 0 &amp;&amp; nums[i] != pat[j]; j = next[j-1]{}\nif nums[i] == pat[j] {\nj++\n}\n}\nreturn j == len(pat)\n}\nfunc  getNext(pat []int) []int {\nnext := make([]int, len(pat))\nnext[0] = 0\nfor l, j := 0, 1 ; j &lt; len(pat); j++ {\nfor l &gt; 0 &amp;&amp; pat[l] != pat[j] {l = next[l-1]}\nif pat[l] == pat[j] {\nl++\n}\nnext[j] = l\n}\nreturn next\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#116","title":"116. \u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488","text":"code <pre><code>/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Left *Node\n *     Right *Node\n *     Next *Node\n * }\n */\nfunc connect(root *Node) *Node {\nif root == nil {\nreturn root\n}\n// \u6700\u4e0b\u9762\u4e00\u5c42\uff0c\u76f4\u63a5\u8fd4\u56de\nif root.Left == nil &amp;&amp; root.Right == nil {\nreturn root\n}\nroot.Left.Next = root.Right\nif root.Next != nil {\nroot.Right.Next = root.Next.Left\n}\nconnect(root.Left)\nconnect(root.Right)\nreturn root\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#_7","title":"\u4e8c\u53c9\u641c\u7d22\u6811","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#98","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":"code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n// \u9012\u5f52\u5b9e\u73b0\n// \u4ece\u4e8c\u53c9\u641c\u7d22\u6811\u5f53\u524d\u8282\u70b9\u7684\u503c\u53ef\u4ee5\u63a8\u51fa\u5de6\u53f3\u8282\u70b9\u7684\u53d6\u503c\u533a\u95f4\uff0c\u9012\u5f52\u5224\u65ad\u6bcf\u4e2a\u8282\u70b9\u5373\u53ef\nfunc isValidBST(root *TreeNode) bool {\nif root == nil {\nreturn true\n}\nreturn jud(root, math.MinInt, math.MaxInt)\n}\nfunc jud(root *TreeNode, start, end int) bool {\nif root == nil {\nreturn true\n}\nif root.Val &lt;= start || root.Val &gt;= end {\nreturn false\n}\nreturn jud(root.Left, start, root.Val) &amp;&amp; jud(root.Right, root.Val, end)\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270211%20%E6%A0%91-%E7%BB%83%E4%B9%A0/#avl","title":"AVL \u6811","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270212%20%E5%9B%BE-%E7%BB%83%E4%B9%A0/","title":"\u56fe\u300c\u7ec3\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270212%20%E5%9B%BE-%E7%BB%83%E4%B9%A0/#_1","title":"\u56fe\u300c\u7ec3\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270212%20%E5%9B%BE-%E7%BB%83%E4%B9%A0/#797","title":"797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84","text":"code <pre><code>// \u5bfb\u627e\u8def\u5f84\n// \u601d\u8def1 \u4f7f\u7528 DFS\uff0c\u5f53\u300c\u8282\u70b9\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u300d\u6216\u8005\u300c\u6ca1\u6709\u4e0b\u4e00\u4e2a\u8282\u70b9\u300d\u7684\u65f6\u5019\u56de\u6eaf\nfunc allPathsSourceTarget(graph [][]int) [][]int {\nvar path []int\nvar ans [][]int\ndfsHelper(graph, 0, &amp;path, &amp;ans)\nreturn ans\n}\nfunc dfsHelper(graph [][]int, startVt int, path *[]int, ans *[][]int) {\n// \u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\n*path = append(*path, startVt)\nfor _, toVt := range graph[startVt] {\nif startVt == len(graph)-1 {\nbreak\n}\n/* \u56e0\u4e3a\u4e00\u4e2a\u8282\u70b9\u53ef\u80fd\u5b58\u5728\u4e0e\u591a\u6761\u4e0d\u540c\u7684\u8def\u5f84\u4e2d\uff0c\u4e0d\u9700\u8981\u6807\u8bb0\u8282\u70b9\u662f\u5426\u8bbf\u95ee\u8fc7 */\n//if _, ok := visited[toVt]; ok {\n//  continue\n//}\ndfsHelper(graph, toVt, path, ans)\n}\n// \u62b5\u8fbe\u7ec8\u70b9\uff0c\u4fdd\u5b58\u8def\u5f84\n// \u6ce8\u610f\u4e0d\u80fd\u5c06 *path \u76f4\u63a5\u653e\u5165 ans \u4e2d\uff0c\u8fd9\u4f1a\u5bfc\u81f4 ans \u4e2d\u53ea\u4fdd\u5b58\u6700\u540e\u4e00\u6761\u8def\u5f84\nif startVt == len(graph)-1 {\ntmpPath := make([]int, len(*path))\ncopy(tmpPath, *path)\n*ans = append(*ans, tmpPath)\n}\n*path = (*path)[:len(*path)-1]\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270213%20%E9%93%BE%E8%A1%A8-%E5%AD%A6%E4%B9%A0/","title":"\u94fe\u8868\u300c\u5b66\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270213%20%E9%93%BE%E8%A1%A8-%E5%AD%A6%E4%B9%A0/#_1","title":"\u94fe\u8868\u300c\u5b66\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270213%20%E9%93%BE%E8%A1%A8-%E5%AD%A6%E4%B9%A0/#_2","title":"\u94fe\u8868\u300c\u5b66\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270214%20%E9%93%BE%E8%A1%A8-%E7%BB%83%E4%B9%A0/","title":"\u94fe\u8868\u300c\u7ec3\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270214%20%E9%93%BE%E8%A1%A8-%E7%BB%83%E4%B9%A0/#_1","title":"\u94fe\u8868\u300c\u7ec3\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270214%20%E9%93%BE%E8%A1%A8-%E7%BB%83%E4%B9%A0/#_2","title":"\u94fe\u8868\u300c\u7ec3\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270215%20%E6%A0%88-%E5%AD%A6%E4%B9%A0/","title":"\u6808\u300c\u5b66\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270215%20%E6%A0%88-%E5%AD%A6%E4%B9%A0/#_1","title":"\u6808\u300c\u5b66\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270215%20%E6%A0%88-%E5%AD%A6%E4%B9%A0/#_2","title":"\u5355\u8c03\u6808","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270215%20%E6%A0%88-%E5%AD%A6%E4%B9%A0/#739","title":"739. \u6bcf\u65e5\u6e29\u5ea6","text":"code <pre><code>// \u6570\u7ec4\u4ece\u540e\u5f80\u524d\u904d\u5386\n// \u4f7f\u7528\u4e00\u4e2a\u6808\u4fdd\u5b58\u6e29\u5ea6\u7684\u4e0b\u6807\n// \u5982\u679c\u5f53\u524d\u6e29\u5ea6 &gt;= \u6808\u9876\u7684\u6e29\u5ea6 --\u300b\u51fa\u6808\n//                      \u5426\u5219 --\u300b \u5165\u6808\nfunc dailyTemperatures(temperatures []int) []int {\nvar stack []int\nvar ans []int\nn := len(temperatures)\nif n == 0 {\nreturn ans\n}\nstack = append(stack, n-1)\nans = append(ans, 0)\nfor i := n-2; i &gt;= 0; i-- {\nt := temperatures[i]\nfor len(stack) != 0 &amp;&amp; t &gt;= temperatures[stack[len(stack)-1]] {\nstack = stack[:len(stack)-1]\n}\nif len(stack) == 0 {\nans = append(ans, 0)\n} else {\nans = append(ans, stack[len(stack)-1] - i)\n}\nstack = append(stack, i)\n}\nfor i := 0; i &lt; n/2; i++ {\nans[i], ans[n-i-1] = ans[n-i-1], ans[i]\n}\nreturn ans\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270216%20%E6%A0%88-%E7%BB%83%E4%B9%A0/","title":"\u6808\u300c\u7ec3\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270216%20%E6%A0%88-%E7%BB%83%E4%B9%A0/#_1","title":"\u6808\u300c\u7ec3\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270216%20%E6%A0%88-%E7%BB%83%E4%B9%A0/#_2","title":"\u5355\u8c03\u6808","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270216%20%E6%A0%88-%E7%BB%83%E4%B9%A0/#739","title":"739. \u6bcf\u65e5\u6e29\u5ea6","text":"code <pre><code>// \u6570\u7ec4\u4ece\u540e\u5f80\u524d\u904d\u5386\n// \u4f7f\u7528\u4e00\u4e2a\u6808\u4fdd\u5b58\u6e29\u5ea6\u7684\u4e0b\u6807\n// \u5982\u679c\u5f53\u524d\u6e29\u5ea6 &gt;= \u6808\u9876\u7684\u6e29\u5ea6 --\u300b\u51fa\u6808\n//                      \u5426\u5219 --\u300b \u5165\u6808\nfunc dailyTemperatures(temperatures []int) []int {\nvar stack []int\nvar ans []int\nn := len(temperatures)\nif n == 0 {\nreturn ans\n}\nstack = append(stack, n-1)\nans = append(ans, 0)\nfor i := n-2; i &gt;= 0; i-- {\nt := temperatures[i]\nfor len(stack) != 0 &amp;&amp; t &gt;= temperatures[stack[len(stack)-1]] {\nstack = stack[:len(stack)-1]\n}\nif len(stack) == 0 {\nans = append(ans, 0)\n} else {\nans = append(ans, stack[len(stack)-1] - i)\n}\nstack = append(stack, i)\n}\nfor i := 0; i &lt; n/2; i++ {\nans[i], ans[n-i-1] = ans[n-i-1], ans[i]\n}\nreturn ans\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270217%20%E5%A0%86-%E5%AD%A6%E4%B9%A0/","title":"\u5806\u300c\u5b66\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270217%20%E5%A0%86-%E5%AD%A6%E4%B9%A0/#_1","title":"\u5806\u300c\u5b66\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270217%20%E5%A0%86-%E5%AD%A6%E4%B9%A0/#_2","title":"\u5806\u300c\u5b66\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270218%20%E5%A0%86-%E7%BB%83%E4%B9%A0/","title":"\u5806\u300c\u7ec3\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270218%20%E5%A0%86-%E7%BB%83%E4%B9%A0/#_1","title":"\u5806\u300c\u7ec3\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270218%20%E5%A0%86-%E7%BB%83%E4%B9%A0/#_2","title":"\u5806\u300c\u7ec3\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270219%20%E6%95%B0%E7%BB%84-%E5%AD%A6%E4%B9%A0/","title":"\u6570\u7ec4\u300c\u5b66\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270219%20%E6%95%B0%E7%BB%84-%E5%AD%A6%E4%B9%A0/#_1","title":"\u6570\u7ec4\u300c\u5b66\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270219%20%E6%95%B0%E7%BB%84-%E5%AD%A6%E4%B9%A0/#189","title":"189. \u8f6e\u8f6c\u6570\u7ec4","text":"code <pre><code>// \u65b9\u6cd5\u4e09\u3001\u539f\u5730\u5b9e\u73b0\uff0c\u4f7f\u7528\u6570\u7ec4\u7ffb\u8f6c\nfunc rotate(nums []int, k int)  {\nn := len(nums)\nif k == 0 || k == n {\nreturn\n}\nk = k % n\nfor i := 0; i &lt; n/2; i++ {\nnums[i], nums[n-i-1] = nums[n-i-1], nums[i]\n}\nfor i := 0; i &lt; k/2; i++ {\nnums[i], nums[k-i-1] = nums[k-i-1], nums[i]\n}\nfor i, cnt := k, 0; i &lt; (n+k)/2; i++ {\nnums[i], nums[n-cnt-1] = nums[n-cnt-1], nums[i]\ncnt++\n}\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270219%20%E6%95%B0%E7%BB%84-%E5%AD%A6%E4%B9%A0/#238","title":"238. \u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef","text":"code <pre><code>// \u505a\u4e24\u6b21\u904d\u5386\n// nums 1   2   3   4   5\n// ans  1   1   2   6   24\n// \u7b2c\u4e00\u6b21\u904d\u5386\u8ba9 ans[i] \u4e2d\u4fdd\u5b58 nums[0~i-1] \u7684\u4e58\u79ef\n// \u7b2c\u4e8c\u6b21\u4ece\u53f3\u5f80\u5de6\u904d\u5386\u8865\u5145ans\u5373\u53ef\nfunc productExceptSelf(nums []int) []int {\nn := len(nums)\nans := make([]int, n)\nans[0] = 1\nfor i := 1; i &lt; len(nums); i++ {\nans[i] = nums[i-1] * ans[i-1]\n}\ntmp := 1\nfor i := n-2; i &gt;= 0; i-- {\ntmp *= nums[i+1]\nans[i] *= tmp\n}\nreturn ans\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270220%20%E6%95%B0%E7%BB%84-%E7%BB%83%E4%B9%A0/","title":"\u6570\u7ec4\u300c\u7ec3\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270220%20%E6%95%B0%E7%BB%84-%E7%BB%83%E4%B9%A0/#_1","title":"\u6570\u7ec4\u300c\u7ec3\u4e60\u300d","text":"","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270220%20%E6%95%B0%E7%BB%84-%E7%BB%83%E4%B9%A0/#189","title":"189. \u8f6e\u8f6c\u6570\u7ec4","text":"code <pre><code>// \u65b9\u6cd5\u4e09\u3001\u539f\u5730\u5b9e\u73b0\uff0c\u4f7f\u7528\u6570\u7ec4\u7ffb\u8f6c\nfunc rotate(nums []int, k int)  {\nn := len(nums)\nif k == 0 || k == n {\nreturn\n}\nk = k % n\nfor i := 0; i &lt; n/2; i++ {\nnums[i], nums[n-i-1] = nums[n-i-1], nums[i]\n}\nfor i := 0; i &lt; k/2; i++ {\nnums[i], nums[k-i-1] = nums[k-i-1], nums[i]\n}\nfor i, cnt := k, 0; i &lt; (n+k)/2; i++ {\nnums[i], nums[n-cnt-1] = nums[n-cnt-1], nums[i]\ncnt++\n}\n}\n</code></pre>","tags":[]},{"location":"1.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/202305270220%20%E6%95%B0%E7%BB%84-%E7%BB%83%E4%B9%A0/#238","title":"238. \u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef","text":"code <pre><code>// \u505a\u4e24\u6b21\u904d\u5386\n// nums 1   2   3   4   5\n// ans  1   1   2   6   24\n// \u7b2c\u4e00\u6b21\u904d\u5386\u8ba9 ans[i] \u4e2d\u4fdd\u5b58 nums[0~i-1] \u7684\u4e58\u79ef\n// \u7b2c\u4e8c\u6b21\u4ece\u53f3\u5f80\u5de6\u904d\u5386\u8865\u5145ans\u5373\u53ef\nfunc productExceptSelf(nums []int) []int {\nn := len(nums)\nans := make([]int, n)\nans[0] = 1\nfor i := 1; i &lt; len(nums); i++ {\nans[i] = nums[i-1] * ans[i-1]\n}\ntmp := 1\nfor i := n-2; i &gt;= 0; i-- {\ntmp *= nums[i+1]\nans[i] *= tmp\n}\nreturn ans\n}\n</code></pre>","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270216%20%E5%AD%A6%E4%B9%A0/","title":"\u300c\u5b66\u4e60\u300d","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270216%20%E5%AD%A6%E4%B9%A0/#kmp","title":"KMP","text":"<p>\u7528\u9014\uff1a\u5b57\u7b26\u4e32\u5339\u914d</p>","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270216%20%E5%AD%A6%E4%B9%A0/#_1","title":"\u4e3e\u4f8b\u8bf4\u660e","text":"<p>S=\"aabaabaac\", pattern=\"aabaac\"</p> <p>\u9884\u671f\u7ed3\u679c\uff1a\u4e3b\u4e32\u4e2d\u5b58\u5728\u6a21\u5f0f\u4e32\uff0c\u5e94\u8be5\u8fd4\u56de\u8d77\u59cb\u4e0b\u6807 -3</p> <p> </p> step1step2\u300cstep3\u300dstep4 <ol> <li>i \u4e0d\u4f1a\u56de\u5934</li> <li>j \u5de6\u4fa7\u7684\u5b57\u7b26\u4e00\u5b9a\u662f\u5df2\u7ecf\u7ecf\u8fc7\u6bd4\u8f83\u7684</li> </ol> <p> </p> <p>\u5f53 S[i] == pattern[j]</p> <p>i\u3001j \u5747\u53f3\u79fb\uff0c\u7ee7\u7eed\u5f80\u4e0b\u6bd4\u8f83</p> <p> </p> <p>\u5f53 S[i] != pattern[j]</p> <p>i \u4e0d\u52a8\uff0cj \u4ee5\u4e00\u5b9a\u7684\u6a21\u5f0f\u8fdb\u884c\u8f6c\u79fb\uff0c\u5177\u4f53\u89c1\u4e0b\u9762\u7684\u573a\u666f</p> <p> </p> j \u5982\u4f55\u79fb\u52a8\uff1f <p>\uff08\u5047\u8bbe\u622a\u53d6\u6a21\u5f0f\u4e32 [0, j-1] \u4e3a pattern\u2018\uff09</p> <p>\u5f53\u53d1\u73b0\u5f53\u524d\u6bd4\u8f83\u7684\u5b57\u7b26\u4e0d\u540c\u65f6\uff1a</p> <ul> <li>\u6a21\u5f0f\u4e32\u627e\u5230 pattern\u2019 \u4e2d\u6700\u957f\u7684\u76f8\u540c\u524d\u540e\u7f00\uff08\u5047\u8bbe\u4e3a comFix\uff09\uff0c\u5982\u4e0a\u56fe\u4e2d\u7684 B \u548c C</li> <li>\u90a3\u4e48\u4e3b\u4e32\u5728\u4e0b\u6807 i \u4e4b\u524d\u4e5f\u5fc5\u5b9a\u6709\u4e00\u4e2a comFix\uff08\u7531\u4e8e j \u524d\u9762\u7684\u5b57\u7b26\u4e00\u5b9a\u7684\u7ecf\u8fc7\u6bd4\u8f83\u7684\uff09\uff0c\u4e5f\u5c31\u662f\u4e0a\u56fe\u4e2d\u7684 A</li> </ul> <p>\u6240\u4ee5 A = B = C\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u628a j \u7684\u4f4d\u7f6e\u79fb\u52a8\u5230 C \u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u6837\u5c31\u80fd\u591f\u4fdd\u8bc1\u5728 i \u4e0d\u56de\u5934\u7684\u60c5\u51b5\u4e0b\uff0cj \u5de6\u8fb9\u7684\u5b57\u7b26\u90fd\u662f\u5df2\u7ecf\u7ecf\u8fc7\u6bd4\u8f83\u7684</p> <p> </p> <p>\u7ee7\u7eed\u5f80\u4e0b\u6bd4\u8f83</p> <p> </p> <p>\u90a3\u4e48 KMP \u7684\u4f2a\u4ee3\u7801\u5c31\u5f88\u5bb9\u6613\u80fd\u591f\u5199\u51fa\u6765\uff1a</p> <pre><code>N M \u4e3a S pattern \u7684\u957f\u5ea6\nfor i &lt; N &amp;&amp; j &lt; M {\n    \u5b57\u7b26\u4e0d\u540c\n        \u5faa\u73af\uff1a\u6839\u636e\u8f6c\u79fb\u6a21\u5f0f\u66f4\u65b0 j\n        \u76f4\u5230\u5b57\u7b26\u76f8\u540c\uff0c\u6216\u8005\u5df2\u7ecf\u662f\u6a21\u5f0f\u4e32\u7684\u9996\u5b57\u7b26\n\n    if \u5b57\u7b26\u76f8\u540c\n        j++\n        i++\n    \u5426\u5219\n        i++\n}\n\u80fd\u591f\u627e\u5230\u5219 j == len(pattern)\n    return i - M + 1\n\u5426\u5219\u6ca1\u6709\u627e\u5230\n    return -1\n</code></pre>","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270216%20%E5%AD%A6%E4%B9%A0/#next","title":"\u83b7\u53d6 Next \u6570\u7ec4","text":"<p>KMP \u7b97\u6cd5\u4e2d j \u7684\u8f6c\u79fb\u662f\u901a\u8fc7\u4e00\u4e2a\u4fdd\u5b58 j \u8f6c\u79fb\u4fe1\u606f\u7684\u6570\u7ec4 next \u6765\u5b9e\u73b0\u7684\uff0c\u90a3\u4e48\u5982\u4f55\u83b7\u5f97\u8fd9\u4e2a\u6570\u7ec4\u662f KMP \u7b97\u6cd5\u7684\u5173\u952e</p> <p>\u9996\u5148\u6839\u636e KMP \u7684\u5de5\u4f5c\u6d41\u7a0b\u53ef\u77e5\uff0cnext \u4e2d\u4fdd\u5b58\u7684\u5176\u5b9e\u662f\u6700\u957f\u516c\u5171\u524d\u540e\u7f00\u7684\u957f\u5ea6\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u6700\u957f\u516c\u5171\u524d\u540e\u7f00\u4e2d\u524d\u7f00\u7684\u4e0b\u4e00\u4e2a\u4e0b\u6807</p> <p>next \u4fdd\u5b58\u4e86\u4ec0\u4e48\uff1f</p> <p>next[i] \u4fdd\u5b58\u4e86 pattern[0,i] \u8fd9\u4e2a\u5b57\u7b26\u4e32\u6700\u957f\u516c\u5171\u524d\u540e\u7f00\u7684\u957f\u5ea6</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\u8bf4\u660e\uff1apattern = \"aabaac\"</p> <p> </p> <p>\u6700\u957f\u76f8\u7b49\u524d\u540e\u7f00\u957f\u5ea6\uff1a</p> \u5b50\u4e32 \u6700\u957f\u516c\u5171\u524d\u540e\u7f00 next a \u65e0(\u957f\u5ea6\u4e3a1\u6ca1\u6709\u524d\u7f00\u4e0e\u540e\u7f00) 0 aa a 1 aab \u65e0 0 aaba a 1 aabaa aa 2 aabaac \u65e0 0 <p>\u5982\u4f55\u5728 O(M) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u83b7\u5f97\u8fd9\u4e2a next \u6570\u7ec4\uff1f \u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4ece\u5934\u5f00\u59cb\u904d\u5386 pattern\uff1a - len\uff1a\u8bb0\u5f55\u4e86\u6700\u957f\u516c\u5171\u524d\u540e\u7f00\u7684\u957f\u5ea6\uff08\u521d\u59cb 0\uff09 - cur\uff1a\u5b50\u4e32\u7ed3\u5c3e\uff08\u521d\u59cb 1\uff09</p> step1step2step3 <p>\u9996\u5148\u521d\u59cb\u5316 next[0] = 0\uff0c\u6240\u6709\u7684\u6a21\u5f0f\u4e32\u90fd\u7b26\u5408</p> <p> </p> <p>\u5224\u65ad pattern[cur] == pattern[len]</p> <p>\u8bf4\u660e\u5b58\u5728\u76f8\u540c\u524d\u540e\u7f00\uff0c\u90a3\u4e48\u5c06 len++\uff0cnext[cur] = len\uff08\u8bf4\u660e\u5b50\u4e32 pattern[0, cur] \u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u957f\u5ea6\u4e3a len\uff09 \u518d\u5c06 cur++\uff0c\u7ee7\u7eed\u5224\u65ad\u4e0b\u4e00\u4e2a\u5b50\u4e32</p> <p> </p> <p>\u5f53 pattern[cur] != pattern[len]</p> <p>\u8bf4\u660e\u5f53\u524d\u7684\u5b50\u4e32\u662f\u4e0d\u5b58\u5728\u516c\u5171\u524d\u540e\u7f00\u7684\uff0c\u90a3\u4e48\u5c06 len \u91cd\u7f6e len = next[len-1]\uff08\u627e\u5b50\u4e32[0, len-1]\u7684\u6700\u5927\u76f8\u540c\u524d\u540e\u7f00\uff0c\u76f4\u5230\u9996\u5b57\u7b26\u7684\u4f4d\u7f6e \u6216\u8005 pattern[len] == pattern[cur]\uff09\uff0c end \u7ee7\u7eed\u53f3\u79fb\u52a8</p> \u6ce8\u610f <p>\u8fd9\u4e2a\u6b65\u9aa4\u5f80\u5f80\u662f\u5bb9\u6613\u51fa\u9519\u7684\uff0c\u770b\u4e0b\u9762\u7684\u4e00\u4e2a\u4f8b\u5b50</p> <p> </p> <p> </p> <p>\u91cd\u590d\u524d\u9762\u8fc7\u7a0b\uff0c\u76f4\u5230\u83b7\u53d6\u6574\u4e2a next \u6570\u7ec4</p> \u4e00\u4e2a\u9519\u8bef\u4ee3\u7801\u5b9e\u73b0 <pre><code>func getNext(pat string) []int {  n := len(pat)  next := make([]int, n)  for l, cur := 0, 1; cur &lt; n; cur ++ {  if pat[cur] == pat[l] {\nl++  } else {  // error\nl = 0  }  next[cur] = l  }  return next  }\n\u6d4b\u8bd5\u4f8b\uff1a\npat=\"afdabeafdaf\"\ngetNext() = [0 0 0 1 0 0 1 2 3 4 0], want [0 0 0 1 0 0 1 2 3 4 2]\n</code></pre> <p>\u6b63\u786e\u5b9e\u73b0\uff1a <pre><code>func getNext(pat string) []int {  n := len(pat)  next := make([]int, n)  for l, cur := 0, 1; cur &lt; n; cur ++ {  // \u4e0d\u76f8\u7b49\u9700\u8981\u6839\u636e\u524d\u9762\u5f97\u5230\u7684 next\uff0c\u66f4\u65b0 l      \n// \u76f4\u5230\u76f8\u7b49\u6216\u8005 l == 0      \nfor l &gt; 0 &amp;&amp; pat[l] != pat[cur] {l = next[l-1]}  if pat[cur] == pat[l] {  l++  }  next[cur] = l  }  return next  }\n</code></pre></p>","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270216%20%E5%AD%A6%E4%B9%A0/#_2","title":"\u6574\u4f53\u4ee3\u7801","text":"<pre><code>func KMP(s, pat string) int {  n, m := len(s), len(pat)  next := getNext(pat)  i, j := 0, 0  for i &lt; n &amp;&amp; j &lt; m {  for j &gt; 0 &amp;&amp; pat[j] != s[i] {j = next[j-1]}  if s[i] == pat[j] {  j++  }  i++  }  if j == m {  return i - m  } else {  return -1  }  }\nfunc getNext(pat string) []int {  n := len(pat)  next := make([]int, n)  for l, cur := 0, 1; cur &lt; n; cur ++ {  // \u4e0d\u60f3\u7b49\u9700\u8981\u6839\u636e\u524d\u9762\u5f97\u5230\u7684 next\uff0c\u66f4\u65b0 l      \n// \u76f4\u5230\u76f8\u7b49\u6216\u8005 l == 0      \nfor l &gt; 0 &amp;&amp; pat[l] != pat[cur] {l = next[l-1]}  if pat[cur] == pat[l] {  l++  }  next[cur] = l  }  return next  }  </code></pre>","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270216%20%E5%AD%A6%E4%B9%A0/#_3","title":"\u6392\u5e8f","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270216%20%E5%AD%A6%E4%B9%A0/#_4","title":"\u5e38\u89c1\u6392\u5e8f","text":"\u5f52\u5e76 <pre><code>// 1. \u5b9a\u4e49\u65b9\u6cd5\uff1a\u5c06\u5de6\u53f3\u4e24\u4e2a\u5df2\u7ecf\u6709\u5e8f\u7684\u5e8f\u5217\u5408\u5e76\u6210\u4e00\u4e2a\u5e8f\u5217\uff08\u539f\u95ee\u9898\u5f97\u89e3\uff1a\u539f\u6570\u7ec4\u6709\u5e8f\uff09  \n// 2. \u5b50\u95ee\u9898\uff1a\u5de6\u53f3\u7684\u6570\u7ec4\u9700\u8981\u6709\u5e8f\uff0c\u4e0e\u539f\u95ee\u9898\u89e3\u51b3\u65b9\u6cd5\u76f8\u540c  \n// 3. \u7ed3\u675f\u6761\u4ef6\uff1a\u6570\u7ec4\u7684\u957f\u5ea6\u4e3a 1\nfunc mergeSort(nums []int) []int {  // \u7ed3\u675f\u6761\u4ef6  \nif len(nums) &lt;= 1 {  return nums  }  // \u5b50\u95ee\u9898\u5173\u7cfb  \nmid := len(nums) / 2  left := mergeSort(nums[:mid])  right := mergeSort(nums[mid:])  // \u65b9\u6cd5\u5b9a\u4e49  \nreturn merge(left, right)  }  // \u5c06\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5408\u5e76  \nfunc merge(nums1, nums2 []int) []int {  n1, n2 := len(nums1), len(nums2)  nums := make([]int, n1 + n2)  i, j, idx := 0, 0, 0  for i &lt; n1 &amp;&amp; j &lt; n2 {  if nums1[i] &lt; nums2[j] {  nums[idx] = nums1[i]  i++  } else {  nums[idx] = nums2[j]  j++  }  idx++  }  for ; i &lt; n1; i++ {  nums[idx] = nums1[i]  idx++  }  for ; j &lt; n2; j++ {  nums[idx] = nums2[j]  idx++  }  return nums  }\n</code></pre> \u5192\u6ce1 <p>func bubbleSort(nums []int)  {     if len(nums) &lt;= 1 {         return     }     for j := len(nums)-1; j &gt;= 1; j--{         for i := 0; i &lt; j; i++ {             if nums[i] &gt; nums[i+1] {                 swap(&amp;nums[i], &amp;nums[i+1])             }         }     } }</p> \u63d2\u5165 <pre><code>func insertSort(nums []int)  {  // nums 1  2  5  3  4  \n//          i (i\u6781\u5176\u53f3\u8fb9\u4e3a\u4e00\u4e2a \u672a\u6392\u5e8f\u7684\u5e8f\u5217)  \n//      j=i-1 (j \u8d1f\u8d23\u5f80\u524d\u627e\u5927\u4e8e\u7b49\u4e8ecur\u7684\u503c)  \nfor i := 1; i &lt; len(nums); i++ {  cur := nums[i]  j := i-1  for ; j&gt;=0 &amp;&amp; nums[j]&gt;cur; j-- {  nums[j+1] = nums[j]  }  // \u7531\u4e8e j \u5f53\u524d\u7684\u4f4d\u7f6e\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8ecur or \u8d8a\u754c  \n// \u6545\u628a\u524d\u9762\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7ed9\u5230cur\uff08\u524d\u9762\u7684\u6570\u5df2\u7ecf\u5f80\u524d\u524d\u7684\u4f4d\u7f6e\u79fb\u52a8\uff09  \nnums[j+1] = cur  }  }\n</code></pre> \u9009\u62e9 <pre><code>func selectSort(nums []int)  {  for i := 0; i &lt; len(nums)-1; i++ {  minIdx := i  for j := i+1; j &lt; len(nums); j++ {  if nums[j] &lt; nums[i] {  minIdx = j  }  }  swap(&amp;nums[i], &amp;nums[minIdx])  }  }\n</code></pre> \u5feb\u6392 <pre><code>// nums \u6570\u7ec4\u6392\u5e8f  \nfunc quickSort(nums []int, start, end int) {  // \u7ed3\u675f\u6761\u4ef6  \nif start &gt;= end {  return  }  // \u5b50\u95ee\u9898\u5173\u7cfb  \npivot := partition(nums, start, end)  quickSort(nums, start, pivot)  quickSort(nums, pivot+1, end)  return  }  func partition(nums []int, start, end int) int {  if start == end {  }  pivot := start  idx := start + 1  for i := start+1; i &lt;= end; i++ {  if nums[i] &lt; nums[pivot] {  swap(&amp;nums[i], &amp;nums[idx])  idx++  }  }  swap(&amp;nums[pivot], &amp;nums[idx-1])  return idx-1  }\n</code></pre>","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270216%20%E5%AD%A6%E4%B9%A0/#_5","title":"\u5b57\u5178\u5e8f","text":"<p>\u7528\u9014\uff1a\u5168\u6392\u5217\u3001\u8fd4\u56de\u57fa\u4e8e\u5b57\u5178\u5e8f\u7684\u4e0b\u4e00\u4e2a\u5e8f\u5217\u7b49</p> <p>\u56db\u6b65\uff1a</p> <ol> <li> <p>\u627e\u4e0a\u5761</p> </li> <li> <p>\u627e\u5bf9\u5927\u4e14\u6700\u5c0f</p> </li> <li> <p>\u4ea4\u6362</p> </li> <li> <p>\u5012\u5e8f</p> </li> </ol> <pre><code>func nextDicArr(nums []int) []int {  if len(nums) &lt;= 1 {  return  }\npos := -1  for i := len(nums)-2; i &gt;= 0; i-- {  if nums[i] &lt; nums[i+1] {  pos = i  break  }  }  // \u6ca1\u627e\u5230\u4e0a\u5761\uff08\u5de6\u503c\u5c0f\u4e8e\u53f3\u503c\uff09\uff0c\u8bf4\u660e\u5df2\u7ecf\u662f\u964d\u5e8f\u6392\u5217  \nif pos == -1 {  for i,n := 0,len(nums); i &lt; n/2; i++ {  nums[i], nums[n-i-1] = nums[n-i-1], nums[i]  }  return nums  }  // \u627e\u5230 pos\uff0c\u63a5\u7740\u627e\u53f3\u8fb9\u5927\u4e8e\u8be5\u503c\u7684\u6700\u5c0f\u503c\uff08\u4e5f\u5c31\u662f\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6807\u8bb0\u7684\u503c\uff09  \nbiggerThanPos := -1  for i := len(nums)-1; i &gt;= pos+1; i-- {  if nums[i] &gt; nums[pos] {  biggerThanPos = i  break  }  }  nums[pos], nums[biggerThanPos] = nums[biggerThanPos], nums[pos]  // \u5269\u4e0b\u7684\u5012\u5e8f  \nfor i,n,cnt := pos+1, len(nums),0; i &lt; (n + pos+1)/2; i++ {  nums[i], nums[n-cnt-1] = nums[n-cnt-1], nums[i]  cnt++  }  return nums  }\n</code></pre>","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270216%20%E5%AD%A6%E4%B9%A0/#_6","title":"\u5f85\u8865\u5145...","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270217%20%E5%9B%9E%E6%BA%AF/","title":"\u56de\u6eaf","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270217%20%E5%9B%9E%E6%BA%AF/#_1","title":"\u56de\u6eaf","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270217%20%E5%9B%9E%E6%BA%AF/#offer-ii-086","title":"\u5251\u6307 Offer II 086. \u5206\u5272\u56de\u6587\u5b50\u5b57\u7b26\u4e32","text":"code <pre><code>//\u5c06 s \u5206\u5272\u6210\u56de\u6587\u5b57\u7b26\u4e32\n//\n//\u5c06 s \u5206\u6210\u4e24\u4e2a\u90e8\u5206\n//- \u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e00\u5b9a\u662f\u56de\u6587\uff0c\u5269\u4e0b\u7684\u5b57\u7b26\u4e32\u4e3a si\uff08\u5b50\u95ee\u9898\u6c42\u89e3\uff09\n//- \u7b2c\u4e8c\u4e2a\u56de\u6587\uff0c\u5269\u4e0b\u7684\u5b57\u7b26\u4e32\u5b50\u95ee\u9898\u6c42\u89e3\n//- \u2026\n//- \u5f53 s \u5360\u636e\u5de6\u8fb9\u90e8\u5206\uff0c\u7ed3\u675f\nfunc partition(s string) [][]string {\nvar palindromes []string\nvar ans [][]string\npartitionHelper(s, &amp;palindromes, &amp;ans)\nreturn ans\n}\n// \u901a\u8fc7 i \u5c06 s \u5212\u5206\u6210\u4e24\u90e8\u5206\uff1as[:i] s[i:]\n// \u521a\u5f00\u59cb\u7684\u65f6\u5019 i \u5e94\u8be5\u4e3a 1\uff0c\u5373\u5de6\u8fb9\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\n// \u5f53 s \u4e3a\u7a7a\u5f53\u65f6\u5019\u7ed3\u675f\nfunc partitionHelper(s string, palindromes *[]string, ans *[][]string) {\nn := len(s)\nif n == 0 {\ntmp := make([]string, len(*palindromes))\ncopy(tmp, *palindromes)\n*ans = append(*ans, tmp)\nreturn\n}\nfor cut := 1; cut &lt;= n; cut++ {\nif isPalindrome(s[:cut]) {\n*palindromes = append(*palindromes, s[:cut])\npartitionHelper(s[cut:], palindromes, ans)\n*palindromes = (*palindromes)[:len(*palindromes)-1]\n}\n}\n}\n// \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u56de\u6587 O(m)\nfunc isPalindrome(s string) bool {\nn := len(s)\nswitch n {\ncase 0, 1:\nreturn true\ncase 2, 3:\nreturn s[0] == s[n-1]\n}\nfor i := 0; i &lt; n/2; i++ {\nif s[i] != s[n-i-1] {\nreturn false\n}\n}\nreturn true\n}\n</code></pre>","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270217%20%E5%9B%9E%E6%BA%AF/#17","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408","text":"code <pre><code>func letterCombinations(digits string) []string {\nif digits == \"\" {\nreturn []string{}\n}\nvar state []byte\ndigitsBs := []byte(digits)\nvar ans []string\nhelper(&amp;state, digitsBs, &amp;ans)\nreturn ans\n}\nvar number2chs = map[int][]byte{\n2: {'a', 'b', 'c'},\n3: {'d', 'e', 'f'},\n4: {'g', 'h', 'i'},\n5: {'j', 'k', 'l'},\n6: {'m', 'n', 'o'},\n7: {'p', 'q', 'r', 's'},\n8: {'t', 'u', 'v'},\n9: {'w', 'x', 'y', 'z'},\n}\nfunc helper(state *[]byte, digits []byte, ans *[]string) {\n/*\u68c0\u67e5\u662f\u5426\u7b26\u5408\u89e3\u7684\u6761\u4ef6*/\nif len(digits) == 0 {\n*ans = append(*ans, string(*state))\nreturn\n}\nnum, _ := strconv.Atoi(string(digits[0]))\nchoices := number2chs[num]\nfor _, choice := range choices {\n/*\u6ca1\u6709\u526a\u679d\u6761\u4ef6*/\n//if !() {\n//  continue\n//}\n/*\u5c1d\u8bd5*/\n*state = append(*state, choice)\nhelper(state, digits[1:], ans)\n/*\u56de\u9000*/\n*state = (*state)[:len(*state)-1]\n}\n}\n</code></pre>","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270217%20%E5%9B%9E%E6%BA%AF/#216-iii","title":"216. \u7ec4\u5408\u603b\u548c III","text":"code <pre><code>// \u526a\u679d\u6761\u4ef6\uff1a\u5f53\u524d\u7684\u548c &gt; n | \u5f53\u524d\u7684\u6570\u91cf &gt; k\nfunc combinationSum3(k int, n int) [][]int {\nstate := &amp;State {\nsum: 0,\n}\nchoices := make([]int, 9)\nfor i := 1; i &lt;= 9; i++ {\nchoices[i-1] = i\n}\nvar ans [][]int\nsumkHelper(state, n, k, choices, &amp;ans)\nreturn ans\n}\ntype State struct {\nsum int\nnums []int\n}\nfunc sumkHelper(state *State, n, k int, choices []int, ans *[][]int) {\n/*\u5224\u65ad\u5f53\u524d\u662f\u5426\u7b26\u5408\u89e3\u7684\u6761\u4ef6*/\nif state.sum == n &amp;&amp; len(state.nums) == k {\ntmp := make([]int, k)\ncopy(tmp, state.nums)\n*ans = append(*ans, tmp)\nreturn\n}\nfor i, choice := range choices {\n/*\u526a\u679d*/\nif state.sum &gt; n || len(state.nums) &gt; k {\nreturn\n}\nif state.sum + choice &gt; n {\nbreak\n}\n// \u5c1d\u8bd5\nstate.sum += choice\nstate.nums = append(state.nums, choice)\nsumkHelper(state, n, k, choices[i+1:], ans)\n// \u56de\u9000\nstate.sum -= choice\nstate.nums = state.nums[:len(state.nums)-1]\n}\n}\n</code></pre>","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270218%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","title":"\u52a8\u6001\u89c4\u5212","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270218%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_1","title":"\u52a8\u6001\u89c4\u5212","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270218%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#55","title":"55. \u8df3\u8dc3\u6e38\u620f","text":"code <pre><code>// dp[i]\n//  1 &lt;- nums[i]\u503c\u7684\u53f3\u8fb9\u8303\u56f4\u5185\u5982\u679c\u5b58\u5728 dp[j] \u4e3a 1\n//  0 &lt;- nums[i]\u503c\u7684\u53f3\u8fb9\u8303\u56f4\u5185\u4e0d\u5b58\u5728 dp[j] \u4e3a1\n// \u521d\u59cb dp[n-1] = 1\n// \n// \u6539\u8fdb\n//  nextOne[i] \u7528\u6765\u8bb0\u5f55dp\u6570\u7ec4\u4e2d\u4e0b\u4e00\u4e2a1\u7684\u4e0b\u6807\uff08\u4ecei\u5f00\u59cb\uff09\n//  \u521d\u59cb nextOne[0~n-1] = n-1\n//  \u66f4\u65b0 dp[i] \n//      \u6839\u636e nextOne[i+1] \u7684\u503c\uff0c\u83b7\u53d6\u4e0b\u4e00\u4e2a1\u7684\u4f4d\u7f6e\n//      d[i] = 1 &lt;- i + nums[i] &gt;= nextOne[i+1]\n//                  \u540c\u65f6\u66f4\u65b0 nextOne[i] = i\n//      dp[i] = 0 &lt;- i + nums[i] &lt; nextOne[i+1]\n//                  \u540c\u65f6\u66f4\u65b0 nextOne[i] = next[i+1]\nfunc canJump(nums []int) bool {\nn := len(nums)\ndp := make([]int, n)\ndp[n-1] = 1\nnextOne := make([]int, n)\nnextOne[n-1] = n-1\nfor i := n-2; i &gt;= 0; i-- {\nif i + nums[i] &gt;= nextOne[i+1] {\ndp[i] = 1\nnextOne[i] = i\n} else {\ndp[i] = 0\nnextOne[i] = nextOne[i+1]\n}\n}\nreturn dp[0] == 1\n}\n</code></pre>","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270218%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#139","title":"139. \u5355\u8bcd\u62c6\u5206","text":"code <pre><code>func wordBreak(s string, wordDict []string) bool {\nn := len(s)\ndp := make([]int, n)\nfor i := 0; i &lt; n; i++ {\nfor _, word := range wordDict {\nm := len(word)\nif i-m+1 &lt; 0 {\ncontinue\n}\nif s[i-m+1:i+1] == word &amp;&amp; i-m+1 == 0 {\ndp[i] = 1\nbreak\n} else if s[i-m+1:i+1] == word &amp;&amp; dp[i-m] == 1 {\ndp[i] = 1\nbreak\n}\n}\n}\nreturn dp[n-1] == 1\n}\n</code></pre>","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270219%20%E8%B4%AA%E5%BF%83/","title":"\u8d2a\u5fc3","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270219%20%E8%B4%AA%E5%BF%83/#_1","title":"\u8d2a\u5fc3","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270219%20%E8%B4%AA%E5%BF%83/#_2","title":"\u8d2a\u5fc3","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270220%20%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/","title":"\u6ed1\u52a8\u7a97\u53e3","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270220%20%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/#_1","title":"\u6ed1\u52a8\u7a97\u53e3","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270220%20%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/#_2","title":"\u6ed1\u52a8\u7a97\u53e3","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270221%20%E5%8F%8C%E6%8C%87%E9%92%88/","title":"\u53cc\u6307\u9488","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270221%20%E5%8F%8C%E6%8C%87%E9%92%88/#_1","title":"\u53cc\u6307\u9488","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270221%20%E5%8F%8C%E6%8C%87%E9%92%88/#1679-k","title":"1679. K \u548c\u6570\u5bf9\u7684\u6700\u5927\u6570\u76ee","text":"code <pre><code>func maxOperations(nums []int, k int) int {\nsort.Ints(nums)\ncnt := 0\nfor i, j := 0, len(nums)-1; i &lt; j; {\nsum := nums[i] + nums[j]\nif sum &lt; k {\ni++\n} else if sum &gt; k {\nj--\n} else {\ncnt++\ni++\nj--\n}\n}\nreturn cnt\n}\n</code></pre>","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270222%20%E6%8E%92%E5%BA%8F/","title":"\u6392\u5e8f","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270222%20%E6%8E%92%E5%BA%8F/#_1","title":"\u6392\u5e8f","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270222%20%E6%8E%92%E5%BA%8F/#_2","title":"\u6392\u5e8f","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270223%20%E6%9F%A5%E6%89%BE/","title":"\u67e5\u627e","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270223%20%E6%9F%A5%E6%89%BE/#_1","title":"\u67e5\u627e","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270223%20%E6%9F%A5%E6%89%BE/#_2","title":"\u67e5\u627e","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270224%20%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88/","title":"\u6df1\u5ea6\u4f18\u5148","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270224%20%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88/#_1","title":"\u6df1\u5ea6\u4f18\u5148","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270224%20%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88/#_2","title":"\u6df1\u5ea6\u4f18\u5148","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270225%20%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88/","title":"\u5e7f\u5ea6\u4f18\u5148","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270225%20%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88/#_1","title":"\u5e7f\u5ea6\u4f18\u5148","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270225%20%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88/#_2","title":"\u5e7f\u5ea6\u4f18\u5148","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270226%20%E9%80%92%E5%BD%92/","title":"\u9012\u5f52","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270226%20%E9%80%92%E5%BD%92/#_1","title":"\u9012\u5f52","text":"","tags":[]},{"location":"2.%E7%AE%97%E6%B3%95/202305270226%20%E9%80%92%E5%BD%92/#_2","title":"\u9012\u5f52","text":"","tags":[]},{"location":"3.%E5%85%B6%E4%BB%96%E8%AE%B0%E5%BD%95/202305270227%20%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/","title":"\u6bcf\u65e5\u4e00\u9898","text":"\u6ca1\u9047\u5230\u4ec0\u4e48\u5934\u75bc\u7684\u95ee\u9898 \u77e5\u8bc6\u70b9\u9057\u5fd8 \u5b66\u5230\u65b0\u4e1c\u897f\u4e86 \u5934\u75bc\uff0c\u96be","tags":[]},{"location":"3.%E5%85%B6%E4%BB%96%E8%AE%B0%E5%BD%95/202305270227%20%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#2023","title":"2023","text":"","tags":[]},{"location":"3.%E5%85%B6%E4%BB%96%E8%AE%B0%E5%BD%95/202305270227%20%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#6","title":"6 \u6708","text":"2475. \u6570\u7ec4\u4e2d\u4e0d\u7b49\u4e09\u5143\u7ec4\u7684\u6570\u76ee \u56de\u6eaf` <pre><code>//  \u601d\u8def1 \u56de\u6eaf\nfunc unequalTriplets(nums []int) int {\nans := 0\nstate := State{\nset: make(map[int]struct{}),\ncnt: 0,\n}\nunequalTripletsHelper(state, nums, &amp;ans)\nreturn ans\n}\ntype State struct {\nset map[int]struct{}\ncnt int\n}\nfunc unequalTripletsHelper(state State, choices []int, ans *int) {\nif len(state.set) == 3 &amp;&amp; len(state.set) == state.cnt {\n*ans++\nreturn\n}\nfor i, num := range choices {\n// cut\nif len(state.set) &gt;= 3 {\nreturn\n}\n// try\nstate.set[num] = struct{}{}\nstate.cnt++\nif len(state.set) != state.cnt {\n//delete(state.set, num)\nstate.cnt--\ncontinue\n}\nunequalTripletsHelper(state, choices[i+1:], ans)\n// back\ndelete(state.set, num)\nstate.cnt--\n}\n}\n</code></pre>","tags":[]},{"location":"3.%E5%85%B6%E4%BB%96%E8%AE%B0%E5%BD%95/202305270227%20%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/#5","title":"5 \u6708","text":"6455. \u4f7f\u6240\u6709\u5b57\u7b26\u76f8\u7b49\u7684\u6700\u5c0f\u6210\u672c <pre><code>// if s[i] != s[i-1] \u9700\u8981\u53cd\u8f6c\n//\n//  #1. \u53cd\u8f6c s[:i]\n//  #2. \u53cd\u8f6c s[i:]\n//\n// \u9009\u62e9\u8f83\u5c0f\u7684\u53cd\u8f6c\u65b9\u5f0f\n// \u65e0\u8bba\u662f #1 \u8fd8\u662f #2 \u7684\u53cd\u8f6c\u65b9\u5f0f\uff0ci \u4e0e i+1 \u4e24\u4e2a\u4f4d\u7f6e\u7684\u5b57\u7b26\u662f\u300c\u4e00\u8d77\u53d8\u5316\u300d\u6216\u8005\u300c\u4e0d\u53d8\u5316\u300d\n// \u56e0\u6b64\u65e0\u9700\u5b9e\u9645\u53cd\u8f6c\u5b57\u7b26\u4e32\nfunc minimumCost(s string) int64 {\nans, n := int64(0), len(s)\nfor i := 1; i &lt; n; i++ {\nif s[i] != s[i-1] {\nans += int64(Min(i, n-i))\n}\n}\nreturn ans\n}\nfunc Min(a, b int) int {\nif a &lt; b {\nreturn a\n}\nreturn b\n}\n</code></pre> 6440. \u5bf9\u89d2\u7ebf\u4e0a\u4e0d\u540c\u503c\u7684\u6570\u91cf\u5dee DP <pre><code>func differenceOfDistinctValues(grid [][]int) [][]int {\nm := len(grid)\nn := len(grid[0])\n// dp1\u3001dp2 \u5206\u522b\u8868\u793a\u5de6\u4e0a\u89d2\u3001\u53f3\u4e0b\u89d2\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5143\u7d20\u96c6\u5408\ndp1 := make([][]map[uint8]struct{}, m)\ndp2 := make([][]map[uint8]struct{}, m)\nans := make([][]int, m)\nfor i := 0; i &lt; m; i++ {\ndp1[i] = make([]map[uint8]struct{}, n)\ndp2[i] = make([]map[uint8]struct{}, n)\nans[i] = make([]int, n)\n}\nfor r1, r2 := 0, m-1; r1 &lt; m; {\nfor c1, c2 := 0, n-1; c1 &lt; n; {\ndp1[r1][c1] = map[uint8]struct{}{}\ndp2[r2][c2] = map[uint8]struct{}{}\n// \u5de6\u4e0a\u89d2\u5143\u7d20\u662f\u5426\u5b58\u5728\nif r1-1 &gt;= 0 &amp;&amp; c1-1 &gt;= 0 {\n// \u5f53\u524d\u5143\u7d20\u52a0\u5165\u96c6\u5408\ndeepCopyMap(dp1[r1][c1], dp1[r1-1][c1-1])\n}\ndp1[r1][c1][uint8(grid[r1][c1])] = struct{}{}\n// \u53f3\u4e0b\u89d2\u5143\u7d20\u662f\u5426\u5b58\u5728\nif r2+1 &lt; m &amp;&amp; c2+1 &lt; n {\ndeepCopyMap(dp2[r2][c2], dp2[r2+1][c2+1])\n}\ndp2[r2][c2][uint8(grid[r2][c2])] = struct{}{}\nc1++\nc2--\n}\nr1++\nr2--\n}\nfor r := 0; r &lt; m; r++ {\nfor c := 0; c &lt; n; c++ {\nx, y := 0, 0\nif (r-1 &gt;= 0 &amp;&amp; c-1 &gt;= 0) &amp;&amp; (r+1 &lt; m &amp;&amp; c+1 &lt; n) {\nx, y = len(dp1[r-1][c-1]), len(dp2[r+1][c+1])\n} else if r+1 &lt; m &amp;&amp; c+1 &lt; n {\n// \u4e0a\u9762\u4e00\u6392\uff0c\u5de6\u8fb9\u4e00\u5217\ny = len(dp2[r+1][c+1])\n} else if r-1 &gt;= 0 &amp;&amp; c-1 &gt;= 0 {\nx = len(dp1[r-1][c-1])\n}\nans[r][c] = abs(x, y)\n}\n}\nreturn ans\n}\nfunc abs(x, y int) int {\nif x &lt; y {\nreturn y - x\n}\nreturn x - y\n}\nfunc deepCopyMap(m1, m2 map[uint8]struct{}) {\nfor k := range m2 {\nm1[k] = struct{}{}\n}\n}\n</code></pre> <p>\u4f18\u5316\uff1a\u53ef\u4ee5\u6309\u5217\u904d\u5386\uff0c\u6bcf\u4e00\u5217\u4f7f\u7528\u4e00\u4e2a map \u6765\u4f5c\u4e3a\u96c6\u5408\u4fdd\u5b58\u5143\u7d20</p> <pre><code>func differenceOfDistinctValues(grid [][]int) [][]int {\n// \u6839\u636e\u5bf9\u89d2\u7ebf\u6765\u904d\u5386\n// \u8bbe\u4ece (0,0) \u5f00\u59cb\u7684\u5bf9\u89d2\u7ebf\u5de6\u4e0b\u65b9\u4e3a \u533a\u57df 1\uff0c\u5176\u4ed6\u4e3a\u533a\u57df 2\nm := len(grid)\nn := len(grid[0])\ndp1 := make([][]uint8, m)\ndp2 := make([][]uint8, m)\nans := make([][]int, m)\nfor i := 0; i &lt; m; i++ {\ndp1[i] = make([]uint8, n)\ndp2[i] = make([]uint8, n)\nans[i] = make([]int, n)\n}\n// \u5148\u904d\u5386\u533a\u57df 1 \u7684\u60c5\u51b5\n// l \u8868\u793a\u4e00\u6761\u5bf9\u89d2\u7ebf\u7684 r \u8d77\u70b9\nfor l := m - 1; l &gt; 0; l-- {\nset1 := make(map[uint8]struct{})\nr, c := l, 0\nfor ; r &lt; m &amp;&amp; c &lt; n; r, c = r+1, c+1 {\ndp1[r][c] = uint8(len(set1))\nset1[uint8(grid[r][c])] = struct{}{}\n}\n// \u5012\u5e8f\u904d\u5386\uff0c\u7edf\u8ba1\u53f3\u4e0b\u89d2\u7684\u60c5\u51b5\nset1 = nil\nset2 := make(map[uint8]struct{})\nfor r2, c2 := r-1, c-1; r2 &gt;= l &amp;&amp; c2 &gt;= 0; r2, c2 = r2-1, c2-1 {\ndp2[r2][c2] = uint8(len(set2))\nset2[uint8(grid[r2][c2])] = struct{}{}\n}\n}\n// \u533a\u57df2\n// l \u8868\u793a\u4e00\u6761\u5bf9\u89d2\u7ebf c \u7684\u8d77\u70b9\nfor l := 0; l &lt; n; l++ {\nset1 := make(map[uint8]struct{})\nr, c := 0, l\nfor ; r &lt; m &amp;&amp; c &lt; n; r, c = r+1, c+1 {\ndp1[r][c] = uint8(len(set1))\nset1[uint8(grid[r][c])] = struct{}{}\n}\n// \u5012\u5e8f\u904d\u5386\uff0c\u7edf\u8ba1\u53f3\u4e0b\u89d2\u7684\u60c5\u51b5\nset1 = nil\nset2 := make(map[uint8]struct{})\nfor r2, c2 := r-1, c-1; r2 &gt;= 0 &amp;&amp; c2 &gt;= l; r2, c2 = r2-1, c2-1 {\ndp2[r2][c2] = uint8(len(set2))\nset2[uint8(grid[r2][c2])] = struct{}{}\n}\n}\nfor r := 0; r &lt; m; r++ {\nfor c := 0; c &lt; n; c++ {\nans[r][c] = abs(int(dp1[r][c]), int(dp2[r][c]))\n}\n}\nreturn ans\n}\n</code></pre> <p> </p> 22. \u62ec\u53f7\u751f\u6210 \u6811\u3001\u56de\u6eaf <p>\u4f7f\u7528\u4e8c\u53c9\u6811\u524d\u5e8f\u904d\u5386\u7684\u65b9\u6cd5</p> <pre><code>func generateParenthesis(n int) []string {\nvar path []byte\nans := make([]string, 0)\ndlr(path, '(', n, &amp;ans)\nreturn ans\n}\nfunc dlr(path []byte, ch byte, n int, ans *[]string) {\n// \u8bbf\u95ee\u8282\u70b9\npath = append(path, ch)\nif len(path) == n*2 {\nif isValid(path) {\n*ans = append(*ans, string(path))\n}\nreturn\n}\ndlr(path, '(', n, ans)\ndlr(path, ')', n, ans)\nreturn\n}\nfunc isValid(pat []byte) bool {\nvar stack []byte\nfor i := 0; i &lt; len(pat); i++ {\nif len(stack) != 0 &amp;&amp; stack[len(stack)-1] == '(' &amp;&amp; pat[i] == ')' {\nstack = stack[:len(stack)-1]\n} else {\nstack = append(stack, pat[i])\n}\n}\nreturn len(stack) == 0\n}\n</code></pre> <p>\u8fd9\u6837\u505a\u4f1a\u5bfc\u81f4\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u5de5\u4f5c,\u5047\u8bbe\u5f53 n = 2,\u53ef\u4ee5\u770b\u6210\u8fd9\u6837\u4e00\u68f5\u4e8c\u53c9\u6811</p> <p> </p> <p>\u603b\u5171\u4f1a\u8d70 2^(2n-1) = 8 \u6761\u8def\u5f84,\u4f46\u662f\u53ea\u6709 2 \u6761\u662f\u7b26\u5408\u6761\u4ef6\u7684</p> <p>\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u89c4\u5f8b:</p> <ul> <li>\u5982\u679c\u5de6\u62ec\u53f7\u7b49\u4e8e n \u4e86,\u4e4b\u540e\u5c31\u53ea\u80fd\u9009\u62e9\u53f3\u62ec\u53f7</li> <li>\u5982\u679c\u76ee\u524d\u7684\u72b6\u6001\u4e2d,\u5de6\u62ec\u53f7\u7684\u6570\u91cf\u6bd4\u53f3\u62ec\u53f7\u5c11,\u90a3\u4e48\u4e00\u5b9a\u662f\u4e0d\u7b26\u5408\u6761\u4ef6\u7684,\u56e0\u4e3a\u6700\u540e\u4e00\u5b9a\u6709\u4e00\u4e2a\u5de6\u62ec\u53f7\u662f\u6ca1\u6709\u53f3\u62ec\u53f7\u5339\u914d\u7684,\u6240\u4ee5\u5982\u679c\u73b0\u5728\u7684\u53f3\u62ec\u53f7\u7b49\u4e8e\u5de6\u62ec\u53f7,\u90a3\u4e48\u4e0b\u4e00\u4e2a\u53ea\u80fd\u9009\u62e9\u5de6\u62ec\u53f7</li> </ul> <p>\u4f18\u5316\u7684\u4ee3\u7801:</p> <pre><code>func generateParenthesis(n int) []string {\nvar path []byte\nans := make([]string, 0)\n// \u65b0\u589e\u4e00\u4e2a\u6570\u7ec4\u6765\u4fdd\u5b58\u5f53\u524d\u72b6\u6001\u5de6\u62ec\u53f7\u548c\u53f3\u62ec\u53f7\u7684\u6570\u91cf\nxy := [2]uint8{0, 0}\nxy[0] = 1\ndlr(path, xy[:], '(', uint8(n), &amp;ans)\nreturn ans\n}\nfunc dlr(path []byte, xy []uint8, ch byte, n uint8, ans *[]string) {\npath = append(path, ch)\nif len(path) == int(n*2) {\n*ans = append(*ans, string(path))\n}\n// \u5de6\u62ec\u53f7\u7684\u6570\u91cf &lt; n \u7684\u65f6\u5019\uff0c\u624d\u80fd\u7ee7\u7eed\u9009\u62e9\u5de6\u62ec\u53f7\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u7b26\u53f7\nif xy[0] &lt; n {\nxy[0]++\ndlr(path, xy, '(', n, ans)\nxy[0]--\n}\n// \u53ea\u6709\u5f53\u53f3\u62ec\u53f7 &lt; \u5de6\u62ec\u53f7\uff0c\u4e0b\u4e00\u4e2a\u624d\u6709\u53ef\u80fd\u9009\u53f3\u62ec\u53f7\nif xy[1] &lt; xy[0] {\nxy[1]++\ndlr(path, xy, ')', n, ans)\nxy[1]--\n}\nreturn\n}\n</code></pre> 1679. K \u548c\u6570\u5bf9\u7684\u6700\u5927\u6570\u76ee \u53cc\u6307\u9488 <pre><code>func maxOperations(nums []int, k int) int {\nsort.Ints(nums)\ncnt := 0\nfor i, j := 0, len(nums)-1; i &lt; j; {\nsum := nums[i] + nums[j]\nif sum &lt; k {\ni++\n} else if sum &gt; k {\nj--\n} else {\ncnt++\ni++\nj--\n}\n}\nreturn cnt\n}\n</code></pre> 547. \u7701\u4efd\u6570\u91cf \u56fe\u3001DFS <pre><code>func findCircleNum(isConnected [][]int) int {\nn := len(isConnected)\nvisited := map[int]struct{}{}\ncnt := 0\nfor i := 0; i &lt; n; i++ {\nif _, ok := visited[i]; ok {\ncontinue\n}\ngraphDFS(isConnected, i, visited)\ncnt++\n}\nreturn cnt\n}\nfunc graphDFS(graph [][]int, start int, visited map[int]struct{}) {\nvisited[start] = struct{}{}\nfor adj, iscon := range graph[start] {\nif _, ok :=  visited[adj]; ok || adj == start || iscon == 0 {\ncontinue\n}\ngraphDFS(graph, adj, visited)\n}\n}\n</code></pre> 216. \u7ec4\u5408\u603b\u548c III \u56de\u6eaf <pre><code>// \u526a\u679d\u6761\u4ef6\uff1a\u5f53\u524d\u7684\u548c &gt; n | \u5f53\u524d\u7684\u6570\u91cf &gt; k\nfunc combinationSum3(k int, n int) [][]int {\nstate := &amp;State {\nsum: 0,\n}\nchoices := make([]int, 9)\nfor i := 1; i &lt;= 9; i++ {\nchoices[i-1] = i\n}\nvar ans [][]int\nsumkHelper(state, n, k, choices, &amp;ans)\nreturn ans\n}\ntype State struct {\nsum int\nnums []int\n}\nfunc sumkHelper(state *State, n, k int, choices []int, ans *[][]int) {\n/*\u5224\u65ad\u5f53\u524d\u662f\u5426\u7b26\u5408\u89e3\u7684\u6761\u4ef6*/\nif state.sum == n &amp;&amp; len(state.nums) == k {\ntmp := make([]int, k)\ncopy(tmp, state.nums)\n*ans = append(*ans, tmp)\nreturn\n}\nfor i, choice := range choices {\n/*\u526a\u679d*/\nif state.sum &gt; n || len(state.nums) &gt; k {\nreturn\n}\nif state.sum + choice &gt; n {\nbreak\n}\n// \u5c1d\u8bd5\nstate.sum += choice\nstate.nums = append(state.nums, choice)\nsumkHelper(state, n, k, choices[i+1:], ans)\n// \u56de\u9000\nstate.sum -= choice\nstate.nums = state.nums[:len(state.nums)-1]\n}\n}\n</code></pre> <p>\u2191 \u5f00\u59cb\u4f7f\u7528\u5206\u7c7b\u8bb0\u5f55</p> <p>17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408</p> code <pre><code>func letterCombinations(digits string) []string {\nif digits == \"\" {\nreturn []string{}\n}\nvar state []byte\ndigitsBs := []byte(digits)\nvar ans []string\nhelper(&amp;state, digitsBs, &amp;ans)\nreturn ans\n}\nvar number2chs = map[int][]byte{\n2: {'a', 'b', 'c'},\n3: {'d', 'e', 'f'},\n4: {'g', 'h', 'i'},\n5: {'j', 'k', 'l'},\n6: {'m', 'n', 'o'},\n7: {'p', 'q', 'r', 's'},\n8: {'t', 'u', 'v'},\n9: {'w', 'x', 'y', 'z'},\n}\nfunc helper(state *[]byte, digits []byte, ans *[]string) {\n/*\u68c0\u67e5\u662f\u5426\u7b26\u5408\u89e3\u7684\u6761\u4ef6*/\nif len(digits) == 0 {\n*ans = append(*ans, string(*state))\nreturn\n}\nnum, _ := strconv.Atoi(string(digits[0]))\nchoices := number2chs[num]\nfor _, choice := range choices {\n/*\u6ca1\u6709\u526a\u679d\u6761\u4ef6*/\n//if !() {\n//  continue\n//}\n/*\u5c1d\u8bd5*/\n*state = append(*state, choice)\nhelper(state, digits[1:], ans)\n/*\u56de\u9000*/\n*state = (*state)[:len(*state)-1]\n}\n}\n</code></pre> <p>\u5251\u6307 Offer II 086. \u5206\u5272\u56de\u6587\u5b50\u5b57\u7b26\u4e32</p> code <pre><code>//\u5c06 s \u5206\u5272\u6210\u56de\u6587\u5b57\u7b26\u4e32\n//\n//\u5c06 s \u5206\u6210\u4e24\u4e2a\u90e8\u5206\n//- \u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e00\u5b9a\u662f\u56de\u6587\uff0c\u5269\u4e0b\u7684\u5b57\u7b26\u4e32\u4e3a si\uff08\u5b50\u95ee\u9898\u6c42\u89e3\uff09\n//- \u7b2c\u4e8c\u4e2a\u56de\u6587\uff0c\u5269\u4e0b\u7684\u5b57\u7b26\u4e32\u5b50\u95ee\u9898\u6c42\u89e3\n//- \u2026\n//- \u5f53 s \u5360\u636e\u5de6\u8fb9\u90e8\u5206\uff0c\u7ed3\u675f\nfunc partition(s string) [][]string {\nvar palindromes []string\nvar ans [][]string\npartitionHelper(s, &amp;palindromes, &amp;ans)\nreturn ans\n}\n// \u901a\u8fc7 i \u5c06 s \u5212\u5206\u6210\u4e24\u90e8\u5206\uff1as[:i] s[i:]\n// \u521a\u5f00\u59cb\u7684\u65f6\u5019 i \u5e94\u8be5\u4e3a 1\uff0c\u5373\u5de6\u8fb9\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\n// \u5f53 s \u4e3a\u7a7a\u5f53\u65f6\u5019\u7ed3\u675f\nfunc partitionHelper(s string, palindromes *[]string, ans *[][]string) {\nn := len(s)\nif n == 0 {\ntmp := make([]string, len(*palindromes))\ncopy(tmp, *palindromes)\n*ans = append(*ans, tmp)\nreturn\n}\nfor cut := 1; cut &lt;= n; cut++ {\nif isPalindrome(s[:cut]) {\n*palindromes = append(*palindromes, s[:cut])\npartitionHelper(s[cut:], palindromes, ans)\n*palindromes = (*palindromes)[:len(*palindromes)-1]\n}\n}\n}\n// \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u56de\u6587 O(m)\nfunc isPalindrome(s string) bool {\nn := len(s)\nswitch n {\ncase 0, 1:\nreturn true\ncase 2, 3:\nreturn s[0] == s[n-1]\n}\nfor i := 0; i &lt; n/2; i++ {\nif s[i] != s[n-i-1] {\nreturn false\n}\n}\nreturn true\n}\n</code></pre> <p>797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84</p> code <pre><code>// \u5bfb\u627e\u8def\u5f84\n// \u601d\u8def1 \u4f7f\u7528 DFS\uff0c\u5f53\u300c\u8282\u70b9\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u300d\u6216\u8005\u300c\u6ca1\u6709\u4e0b\u4e00\u4e2a\u8282\u70b9\u300d\u7684\u65f6\u5019\u56de\u6eaf\nfunc allPathsSourceTarget(graph [][]int) [][]int {\nvar path []int\nvar ans [][]int\ndfsHelper(graph, 0, &amp;path, &amp;ans)\nreturn ans\n}\nfunc dfsHelper(graph [][]int, startVt int, path *[]int, ans *[][]int) {\n// \u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\n*path = append(*path, startVt)\nfor _, toVt := range graph[startVt] {\nif startVt == len(graph)-1 {\nbreak\n}\n/* \u56e0\u4e3a\u4e00\u4e2a\u8282\u70b9\u53ef\u80fd\u5b58\u5728\u4e0e\u591a\u6761\u4e0d\u540c\u7684\u8def\u5f84\u4e2d\uff0c\u4e0d\u9700\u8981\u6807\u8bb0\u8282\u70b9\u662f\u5426\u8bbf\u95ee\u8fc7 */\n//if _, ok := visited[toVt]; ok {\n//  continue\n//}\ndfsHelper(graph, toVt, path, ans)\n}\n// \u62b5\u8fbe\u7ec8\u70b9\uff0c\u4fdd\u5b58\u8def\u5f84\n// \u6ce8\u610f\u4e0d\u80fd\u5c06 *path \u76f4\u63a5\u653e\u5165 ans \u4e2d\uff0c\u8fd9\u4f1a\u5bfc\u81f4 ans \u4e2d\u53ea\u4fdd\u5b58\u6700\u540e\u4e00\u6761\u8def\u5f84\nif startVt == len(graph)-1 {\ntmpPath := make([]int, len(*path))\ncopy(tmpPath, *path)\n*ans = append(*ans, tmpPath)\n}\n*path = (*path)[:len(*path)-1]\n}\n</code></pre> <p>739. \u6bcf\u65e5\u6e29\u5ea6</p> code <pre><code>// \u6570\u7ec4\u4ece\u540e\u5f80\u524d\u904d\u5386\n// \u4f7f\u7528\u4e00\u4e2a\u6808\u4fdd\u5b58\u6e29\u5ea6\u7684\u4e0b\u6807\n// \u5982\u679c\u5f53\u524d\u6e29\u5ea6 &gt;= \u6808\u9876\u7684\u6e29\u5ea6 --\u300b\u51fa\u6808\n//                      \u5426\u5219 --\u300b \u5165\u6808\nfunc dailyTemperatures(temperatures []int) []int {\nvar stack []int\nvar ans []int\nn := len(temperatures)\nif n == 0 {\nreturn ans\n}\nstack = append(stack, n-1)\nans = append(ans, 0)\nfor i := n-2; i &gt;= 0; i-- {\nt := temperatures[i]\nfor len(stack) != 0 &amp;&amp; t &gt;= temperatures[stack[len(stack)-1]] {\nstack = stack[:len(stack)-1]\n}\nif len(stack) == 0 {\nans = append(ans, 0)\n} else {\nans = append(ans, stack[len(stack)-1] - i)\n}\nstack = append(stack, i)\n}\nfor i := 0; i &lt; n/2; i++ {\nans[i], ans[n-i-1] = ans[n-i-1], ans[i]\n}\nreturn ans\n}\n</code></pre> <p>2698. \u6c42\u4e00\u4e2a\u6574\u6570\u7684\u60e9\u7f5a\u6570</p> code <pre><code>// \u6838\u5fc3\u6b65\u9aa4\uff1a\n//  \u5b50\u95ee\u98981. num, num*num \u5b57\u7b26\u4e32\u662f\u5426\u6ee1\u8db3\uff1a\u5b58\u5728\u4e00\u79cd\u5206\u5272\u60c5\u51b5\uff0c\u4f7f\u5f97 a+b+...+x = num\n//\n//\n// notice: n&lt;=1000\uff0c n*n &lt;=1000 000\n// num\uff1a\u4ece 1 \u5230 100 0000 \u7684\u6570\u662f\u5426\u7b26\u5408\u5b50\u95ee\u98981\u662f\u56fa\u5b9a\u7684\uff01\n//\n// 1 9 10 36\n// 1 81 100 1296\n//\n//\n// \u8c08\u8bba 36 \u7684\u60c5\u51b5\uff0c \u5206\u5272 1 \uff0c\u5b50\u95ee\u9898\u662f\uff1a296 \u80fd\u5426\u5206\u5272\u621036-1=35 --\u300b \u53ef\u4ee5\u7528\u9012\u5f52\u6765\u5b9e\u73b0\u8fd9\u4e2a\u5b50\u95ee\u9898\nfunc punishmentNumber(n int) int {\nans := 0\nfor i := 1; i &lt;= n; i++ {\nif expectN(i, strconv.Itoa(i*i)) {\nans += i * i\n}\n}\nreturn ans\n}\n// \u7528\u6765\u89e3\u51b3\u5b50\u95ee\u98981\n// squ \u662f\u5426\u5b58\u5728\u5206\u5272\u60c5\u51b5\uff0c\u4f7f\u5f97\u5404\u90e8\u5206\u7684\u548c == num\nfunc expectN(num int, squ string) bool {\nif squ == \"\" {\nreturn false\n}\nsquN, _ := strconv.Atoi(squ)\nif num == squN {\nreturn true\n}\nfor i := 1; i &lt; len(squ); i++ {\na, _ := strconv.Atoi(squ[:i])\nif expectN(num-a, squ[i:]) {\nreturn true\n}\n}\nreturn false\n}\n</code></pre> <p>139. \u5355\u8bcd\u62c6\u5206</p> code <pre><code>func wordBreak(s string, wordDict []string) bool {\nn := len(s)\ndp := make([]int, n)\nfor i := 0; i &lt; n; i++ {\nfor _, word := range wordDict {\nm := len(word)\nif i-m+1 &lt; 0 {\ncontinue\n}\nif s[i-m+1:i+1] == word &amp;&amp; i-m+1 == 0 {\ndp[i] = 1\nbreak\n} else if s[i-m+1:i+1] == word &amp;&amp; dp[i-m] == 1 {\ndp[i] = 1\nbreak\n}\n}\n}\nreturn dp[n-1] == 1\n}\n</code></pre> <p>56. \u5408\u5e76\u533a\u95f4</p> code <pre><code>// \u4f7f\u7528\u6570\u7ec4 cnt[i] \u6765\u4fdd\u5b58 i \u6570\u503c\u662f\u5426\u5728\u67d0\u4e2a\u533a\u95f4\u91cc\u9762\uff0c\n//  \u6bd4\u5982 [1,6] [2,7] \u90a3\u4e48 cnt[3] = 2 \u8868\u793a\u5728\u4e24\u4e2a\u533a\u95f4\u91cc\u9762\n// \n// \u601d\u8def2. \u6309\u533a\u95f4\u7684\u5de6\u503c\u4ece\u5c0f\u5230\u8fbe\u6392\u5217\uff0c\n//              \u5982\u679c\u5f53\u524d\u533a\u95f4\u7684\u53f3\u503c&gt;=\u4e0b\u4e00\u4e2a\u533a\u95f4\u7684\u5de6\u503c\uff0c\u8bf4\u660e\u6709\u91cd\u53e0\n//              \u53ef\u80fd\u6709\u4e09\u79cd\u79cd\u60c5\u51b51. [1,3] [2,6] --&gt; \u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u76f4\u63a5\u628a 2 \u6539\u6210 1\n//                              2. [1,6] [2,3] --&gt; \u8fd9\u79cd\u60c5\u51b5\u628a 2 \u6539\u6210 1\uff0c\u628a 3 \u6539\u6210 6\n//                              3. [1,2] [3,4] --&gt; \u6ca1\u6709\u91cd\u53e0\uff0c\u6ca1\u6709\u91cd\u53e0\u7684\u60c5\u51b5\u5c31\u628a\u5f53\u524d\u7684\u533a\u95f4\u52a0\u5165\u7ed3\u679c\u96c6\nfunc merge(intervals [][]int) [][]int {\nvar ans [][]int\nsort.Slice(intervals, func(i, j int) bool {\nreturn intervals[i][0] &lt; intervals[j][0]\n})\nfor i := 0; i &lt; len(intervals) - 1; i++ {\nif intervals[i][1] &lt; intervals[i+1][0] {\nans = append(ans, intervals[i])\n} else if intervals[i][1] &gt;= intervals[i+1][0] &amp;&amp; intervals[i][1] &lt; intervals[i+1][1] {\nintervals[i+1][0] = intervals[i][0]\n} else if intervals[i][1] &gt;= intervals[i+1][1] {\nintervals[i+1] = intervals[i]\n}\n}\nans  = append(ans, intervals[len(intervals) - 1])\nreturn ans\n}\n</code></pre> <p>560. \u548c\u4e3a K \u7684\u5b50\u6570\u7ec4</p> code <pre><code>//        start      end\n//  x x x x x x x x x x x x \n//  \u5047\u8bbe end \u4e3a\u8fd9\u4e2a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u7ec8\u70b9\n//      start \u4e3a\u8d77\u70b9\n//  pre[i] \u4e3a\u524d\u7f00\u548c\uff0cpre[0] = nums[0]\n// \u6c42\uff1apre[end] - pre[start-1] = k\n// end \u904d\u5386 nums\uff0c\u6b64\u65f6 pre[end]\uff0ck \u5df2\u77e5\uff0c\u53ea\u9700\u8981\u627e\u5230\u524d\u9762\u6709\u51e0\u4e2a pre[i] \u7b49\u4e8e pre[end] - k \u5373\u53ef\nfunc subarraySum(nums []int, k int) int {\npreCnt := map[int]int{}\n// pre := make([]int, len(nums))\npre := 0\ncnt := 0\npreCnt[0] = 1\nfor end := 0; end &lt; len(nums); end ++ {\npre += nums[end]\ncnt += preCnt[pre - k]\n// \u7edf\u8ba1\u524d\u7f00\u548c\u51fa\u73b0\u7684\u6b21\u6570\npreCnt[pre]++\n}\nreturn cnt\n}\n</code></pre> <p>438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd</p> code <pre><code>func findAnagrams(s string, p string) []int {\nvar ans []int\nm, n := len(p), len(s)\nif m &gt; n {\nreturn ans\n}\nvar pCnt, sCnt [26]int\nfor i := range p {\npCnt[p[i]-'a'] ++\nsCnt[s[i]-'a'] ++\n}\nif sCnt == pCnt {\nans = append(ans, 0)\n}\nfor i := m; i &lt; n; i++ {\nsCnt[s[i]-'a']++\nsCnt[s[i-m]-'a']--\nif sCnt == pCnt {\nans = append(ans, i-m+1)\n}\n}\nreturn ans\n}\n</code></pre> <p>15. \u4e09\u6570\u4e4b\u548c</p> code <pre><code>func threeSum(nums []int) [][]int {\n// \u5148\u5c06\u6570\u7ec4\u4ece\u5c0f\u5230\u8fbe\u6392\u5e8f\nsort.Ints(nums)\nn := len(nums)\nvar ans [][]int\nlastA := nums[0] - 1\nfor i := 0; i &lt; n; i++ {\n// \u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u8ddf\u4e0a\u4e00\u6b21\u5faa\u73af\u7684\u6570\u4e00\u81f4\uff0c\u8df3\u8fc7\u8be5\u5faa\u73af\ncIdx := n - 1\nif nums[i] == lastA {\ncontinue\n}\n// \u7b2c\u4e8c\u4e2a\u6570\u5728\u5f80\u540e\u5bfb\u627e\u7684\u65f6\u5019\n// \u5982\u679c\u4e0b\u4e00\u4e2a\u6570\u8ddf\u4e0a\u4e00\u4e2a\u6570\u76f8\u540c\uff0c\u4e5f\u5e94\u8be5\u8df3\u8fc7\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u91cd\u590d\u7684\u4e09\u5143\u7ec4\nlastB := nums[0] - 1\nfor j := i + 1; j &lt; cIdx; j++ {\nif lastB == nums[j] {\ncontinue\n}\nfor ; cIdx &gt; j; cIdx-- {\nsum := nums[i] + nums[j] + nums[cIdx]\nif sum &lt; 0 {\n// \u5982\u679c\u548c\u5c0f\u4e8e0\uff0c\u4e0d\u5fc5\u7ee7\u5f80\u524d\u904d\u5386\u627e\u7b2c\u4e09\u4e2a\u6570\n// \u8ba9\u7b2c\u4e8c\u4e2a\u6570\u589e\u5927\uff0c\u624d\u6709\u53ef\u80fd\u8ba9 sum \u4e3a\u96f6\nbreak\n} else if sum == 0 {\nelem := []int{nums[i], nums[j], nums[cIdx]}\nans = append(ans, elem)\nbreak\n}\n}\nlastB = nums[j]\n}\nlastA = nums[i]\n}\nreturn ans\n}\n</code></pre> <p>11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668</p> code <pre><code>func maxArea(height []int) int {\nl, r := 0, len(height) - 1\nans := math.MinInt\nfor l &lt; r {\nans = max(ans, (r-l) * min(height[l], height[r])) // calc area\nif height[l] &lt; height[r] {\nl++\n} else {\nr--\n}\n}\nreturn ans\n}\nfunc max(a, b int) int {\nif a &lt; b {\nreturn b\n}\nreturn a\n}\nfunc min(a, b int) int {\nif a &lt; b {\nreturn a\n}\nreturn b\n}\n</code></pre> <p>128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217</p> code <pre><code>// \u601d\u8def1. \u6392\u5e8f + \u53cc\u6307\u9488\n//      o(nlogn) + o(n)\n// \n// \u5982\u4f55\u5728 o(n) \u65f6\u95f4\u590d\u6742\u5ea6\u4e4b\u5185\u5b8c\u6210\uff1f\n// \u5148\u904d\u5386\u4e00\u904d\uff0c\u628a num \u90fd\u653e\u5165map \uff0c\u7528\u6765\u6807\u8bb0\u6570\u7ec4\u4e2d\u5b58\u5728\u8fd9\u4e2a\u6570(appeared)\n// \u518d\u904d\u5386\u4e00\u904d\uff0c\u5982\u679c\u8be5\u6570\u80fd\u591f\u4f5c\u4e3a\u6570\u7ec4\u7684\u8d77\u70b9\uff0c\u5c31\u6301\u7eed +1 \u76f4\u5230\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u8fd9\u4e2a\u6570\uff0c\u8bb0\u5f55\u957f\u5ea6\n// \u524d\u9762\u4f7f\u7528 o(n) \u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u6362\u53d6\u4e86 o(1) \u7684\u67e5\u627e\u6548\u7387\uff0c\u6700\u5dee\u60c5\u51b5\u4e0b\u4e5f\u5c31\u662f\u6574\u4e2a\u6570\u7ec4\u4e0d\u8fde\u7eed\uff0c\u4e5f\u662f o(n)\nfunc longestConsecutive(nums []int) int {\nif len(nums) == 0 {\nreturn 0\n}\nappeared := map[int]bool{}\nfor _, num := range nums {\nappeared[num] = true\n}\nmaxLen := math.MinInt\nfor _, num := range nums {\nif !appeared[num-1] {\ncnt := 0\nfor appeared[num] {\nnum++\ncnt++\n}\nmaxLen = max(maxLen, cnt)\n}\n}\nreturn maxLen\n}\nfunc max(a, b int) int {\nif a &lt; b {\nreturn b\n}\nreturn a\n}\n</code></pre> <p>1016. \u5b50\u4e32\u80fd\u8868\u793a\u4ece 1 \u5230 N \u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u4e32</p> code <pre><code>//\n// \u601d\u8def1. \u904d\u5386 n\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u5224\u65ad\u662f\u5426\u662f s \u7684\u5b50\u4e32\uff0c \u5982\u679c\u4f7f\u7528 kmp \u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f s \u7684\u957f\u5ea6 m\n//      o(n * m)  * \u6570\u5b57\u8f6c\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u7684\u65f6\u95f4\n//  n's max = 1000000000 n * \u6bcf\u4e2a\u6570\u5b57\u8f6c\u4e8c\u8fdb\u5236\u7684\u65f6\u95f4\u5e94\u8be5\u5f88\u957f\uff0c\u518d\u52a0\u4e0a\u5339\u914d\u7684\u65f6\u95f4\u53ef\u80fd\u4f1a\u8d85\u65f6\n// \u5047\u8bbe   n\n//      15:1111     \u5982\u679c\u662f\u5b50\u4e32\uff0c\u90a3\u4e48 111\u300111\u30011 \u90fd\u662f\u5b50\u4e32 15 7 3 1\n//      14:1110     \u5982\u679c\u662f\u5b50\u4e32\uff0c\u90a3\u4e48 110\u300110\u30010 \u90fd\u662f\u5b50\u4e32\n//      13:1101     \u5982\u679c\u662f\u5b50\u4e32\uff0c\u90a3\u4e48 101\u30011 \u90fd\u662f\u5b50\u4e32\n//      12:1100     ..\n//      11:1011\n//      10:1010\n//       9:1001\n//      ...\n//       1:0001\n//\n// \u601d\u8def2. \u901a\u8fc7\u4e0a\u9762\u7684\u5206\u6790\u53ef\u4ee5\u627e\u5230\u4e00\u79cd\u4f18\u5316\n//      \u4ece\u6700\u5927\u7684\u6570\u5f00\u59cb\u6bd4\u8f83\uff0c\u5982\u679c\u8fd9\u4e2a\u6570\u7b26\u5408\uff0c\u90a3\u4e48\u6301\u7eed\u53f3\u79fb(/2)\uff0c\u653e\u5165\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684 map\uff0c\n//      \u904d\u5386\u7684\u65f6\u5019\u5982\u679c\u8fd9\u4e2a\u6570\u5df2\u7ecf\u88ab\u653e\u5165 map\uff0c\u5c31\u8df3\u8fc7\nfunc queryString(s string, n int) bool {\nset := map[int]bool{}\nfor num := n; num &gt;= 1; num-- {\nif _, ok := set[num]; ok {\ncontinue\n}\nbinaryStr := strconv.FormatInt(int64(num), 2)\nif kmp(s, binaryStr) {\ntmpNum := num\nfor tmpNum &gt; 0 {\nset[tmpNum] = true\ntmpNum /= 2\n}\n} else {\nreturn false\n}\n}\nreturn len(set) == n\n}\n//  i\n// s\n// pat\n//  j\nfunc kmp(s, pat string) bool {\nn, m := len(s), len(pat)\ni, j := 0, 0\nnext := getNext(pat)\nfor i &lt; n &amp;&amp; j &lt; m {\nfor j &gt; 0 &amp;&amp; pat[j] != s[i] {j = next[j-1]}\nif pat[j] == s[i] {\nj++\n}\ni++\n}\nreturn j == m\n}\n// i\n// a a b a a c a a f\n// j\n// 0 1 0 1 2\nfunc getNext(pat string) []int {\ni, j, n := 1, 0, len(pat)\nnext := make([]int, n)\nnext[0] = 0\nfor i &lt; n {\nfor j &gt; 0 &amp;&amp; pat[j] != pat[i] {j = next[j-1]}\nif pat[i] == pat[j] {\nj++\n}\nnext[i] = j\ni++\n}\nreturn next\n}\n</code></pre> <p>71. \u7b80\u5316\u8def\u5f84</p> code <pre><code>//  // -&gt; /\n//  /./ -&gt; \u76f4\u63a5\u628a\u521a\u5165\u6808\u7684 . \u53bb\u9664\n//  /../ -&gt; \u56de\u9000\u5230\u4e0a\u4e00\u4e2a /\n// \n// /.../ -&gt; \u89c6\u4f5c\u5408\u6cd5\nfunc simplifyPath(path string) string {\nvar st []byte\n// \u56e0\u4e3a\u8fd9\u4e2a\u65b9\u6cd5\u90fd\u662f\u4ee5 '/' \u6765\u5224\u65ad\u5f80\u524d\u56de\u9000\uff0c\u6240\u4ee5\u5728\u6700\u540e\u8865\u5145\u4e00\u4e2a '/'\n// \u4fdd\u8bc1\u5b57\u7b26\u4e32\u4ee5 '/' \u7ed3\u5c3e\npath += \"/\"\nfor i := range path {\nif len(st) == 0 || path[i] != '/' {\nst = append(st, path[i])\n} else {\n// len(st) &gt; 0\n// path[i] == '/'\ntop := len(st) - 1\nsec := top - 1\nthr := sec - 1\nif st[top] == '/' {\n// //\n// nothing to do \n// dont push this '/'\n} else if sec &gt;= 0 &amp;&amp; string(st[sec:]) == \"/.\" {\nst = st[:len(st)-1]\n} else if thr &gt;= 0 &amp;&amp; string(st[thr:]) == \"/..\" {\n// ../\nfor st[len(st)-1] != '/' {\nst = st[:len(st)-1]\n}\n// \u5982\u679c\u6b64\u65f6 len(st) == 1\n// \u8bf4\u660e\u5df2\u7ecf\u662f\u6839\u76ee\u5f55 / \u65e0\u6cd5\u7ee7\u7eed\u5f80\u4e0a\u627e\u76ee\u5f55\uff0c\u5230\u6b64\u7ed3\u675f\n// \u5982\u679c\u6b64\u65f6 len(st) &gt; 1\n// \u4e5f\u5c31\u8bf4\u660e\u524d\u9762\u8fd8\u6709\u76ee\u5f55     xxxxa/\n// \u9700\u8981\u7ee7\u7eed\u5f80\u524d\u627e\u5230\u4e00\u4e2a '/'\nif len(st) &gt; 1 {\nst = st[:len(st)-1]\nfor st[len(st)-1] != '/' {\nst = st[:len(st)-1]\n}\n}\n} else {\nst = append(st, path[i])\n}\n}\n}\nif len(st) != 1 &amp;&amp;  st[len(st)-1] == '/' {\nreturn string(st[:len(st)-1])\n}\nreturn string(st)\n}\n</code></pre> <p>49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4</p> code <pre><code>func groupAnagrams(strs []string) [][]string {\ngroup := map[string][]string{}\nfor _, s := range strs {\nbs := []byte(s)\nsort.Slice(bs, func(i, j int) bool {\nreturn bs[i] &lt; bs[j]\n})\ngroup[string(bs)] = append(group[string(bs)], s)\n}\nvar ans [][]string\nfor _, v := range group {\nans = append(ans, v)\n}\nreturn ans\n}\n</code></pre> <p>1376. \u901a\u77e5\u6240\u6709\u5458\u5de5\u6240\u9700\u7684\u65f6\u95f4</p> code <pre><code>func numOfMinutes(n int, headID int, manager []int, informTime []int) int {\ng := map[int][]int{}\nfor i, m := range manager {\ng[m] = append(g[m], i)\n}\nvar dfs func(int) int\ndfs = func(cur int) (res int) {\nfor _, neighbor := range g[cur] {\nres1 := dfs(neighbor)\nif res1 &gt; res {\nres = res1\n}\n}\nreturn informTime[cur] + res\n}\nreturn dfs(headID)\n}\n</code></pre> <p>2661. \u627e\u51fa\u53e0\u6d82\u5143\u7d20</p> code <pre><code>func firstCompleteIndex(arr []int, mat [][]int) int {\nm, n := len(mat), len(mat[0])\nlineCnt := make([]int, m)\ncolCnt := make([]int, n)\nnum2idx := make([]int, 100001)\npreI, preJ := 0, 0\nfor i, num := range arr {\nidx := num2idx[num]\n// not exists\nif idx == 0 {\nLOOP:\nfor _i := preI ; _i &lt; m; _i++ {\n_j := 0\nif _i == preI {\n_j = preJ\n}\nfor ; _j &lt; n; _j++ {\nnum2idx[mat[_i][_j]] = n * _i + _j\nif mat[_i][_j] == num {\npreI = _i\npreJ = _j\nidx = num2idx[num]\nbreak LOOP\n}\n}\n}\n}\nrow := idx/n\ncol := idx%n\nlineCnt[row] ++\ncolCnt[col]++\nif lineCnt[row] == n {\nreturn i\n}\nif colCnt[col] == m {\nreturn i\n}\n}\nreturn -1\n}\n</code></pre> <p>970. \u5f3a\u6574\u6570</p> code <pre><code>func powerfulIntegers(x int, y int, bound int) []int {\nvar ans []int\nappeared := make([]int, bound + 1)\nif bound &gt;= 2 {\nans = append(ans, 2)\nappeared[2] = 1\n}\nif x == 1 &amp;&amp; y == 1 {\nreturn ans\n}\nif x == 1 || y == 1 {\nnotOne := x\nif x == 1 {\nnotOne = y\n}\nz := 1\nfor j := 0; ; j++ {\nsum := 1 + z * notOne\nz *= notOne\nif sum &gt; bound {\nreturn ans\n}\nif appeared[sum] == 1 {\ncontinue\n}\nans = append(ans, sum)\nappeared[sum] = 1\n}\n}\nxx, yy := 1, 1\niMax := 0\nfor i := 0; ; i++ {\nsum :=  xx * x + yy // x^ + y^0\nxx *= x\nif sum &gt; bound {\niMax = i + 1\nbreak\n}\nif appeared[sum] == 1 {\ncontinue\n}\nans = append(ans, sum)\nappeared[sum] = 1\n}\nxx, yy = 1, 1\nfor i := 0; i &lt; iMax; i++ {\nfor j := 1; ; j++ {\nsum := power(x, i) + power(y, j)\nif sum &gt; bound {\nbreak\n}\nif appeared[sum] == 1 {\ncontinue\n}\nans = append(ans, sum)\nappeared[sum] = 1\n}\n}\nreturn ans\n}\nfunc power(x, i int) int {\nif x == 1 {\nreturn 1\n}\nif i == 0 {\nreturn 1\n}\nxx := 1\nfor i &gt; 0 {\nxx *= x\ni--\n}\nreturn xx\n} </code></pre> <p>113. \u8def\u5f84\u603b\u548c II</p> code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc pathSum(root *TreeNode, targetSum int) [][]int {\nvar st []*TreeNode\nvar ans [][]int\nif root == nil {\nreturn ans\n}\ntmpRoot := root\npre := root\nfor len(st) &gt; 0 || tmpRoot != nil {\nfor tmpRoot != nil {\nst = append(st, tmpRoot)\ntmpRoot = tmpRoot.Left\n}\ntmpRoot = st[len(st)-1]\nif tmpRoot.Right == nil || tmpRoot.Right == pre {\n// visit\nif tmpRoot.Left == nil &amp;&amp; tmpRoot.Right == nil {\nsum := 0\nvar path []int\nfor _, node := range st {\nsum += node.Val\npath = append(path, node.Val)\n}\nif sum == targetSum {\nans = append(ans, path)\n}\n}\nst = st[:len(st)-1]\npre = tmpRoot\ntmpRoot = nil\n} else {\ntmpRoot = tmpRoot.Right\n}\n} return ans\n}\n</code></pre> <p>199. \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe</p> code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc rightSideView(root *TreeNode) []int {\nvar ans []int\nif root == nil {\nreturn ans\n}\nvar st []*TreeNode\ntmpNode := root\npre := root\nfor len(st) &gt; 0 || tmpNode != nil {\nfor tmpNode != nil {\nst = append(st, tmpNode)\nif len(st) &gt; len(ans) {\nans = append(ans, tmpNode.Val)\n}\ntmpNode = tmpNode.Right\n}\n// \u5224\u65ad\u662f\u5426\u8be5\u8bbf\u95ee\u8be5\u8282\u70b9\ntmpNode = st[len(st)-1]\nif tmpNode.Left == nil || tmpNode.Left == pre {\npre = tmpNode\ntmpNode = nil\nst = st[:len(st)-1]\n} else {\ntmpNode = tmpNode.Left\n}\n}\nreturn ans\n}\n</code></pre> <p>572. \u53e6\u4e00\u68f5\u6811\u7684\u5b50\u6811</p> code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n// \u901a\u8fc7\u6811\u7684\u5148\u5e8f\u904d\u5386\n// \u8865\u5145\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u8ba9\u5ea6\u4e3a2\uff0c\u8f93\u51fa\u6811\u7684\u5148\u5e8f\u904d\u5386\n// \u5224\u65ad\u4e3b\u6811\u7684\u5e8f\u5217\u5305\u542b\u5b50\u6811\u7684\u5e8f\u5217\nfunc isSubtree(root *TreeNode, subRoot *TreeNode) bool {\nnums1 := dlrNums(root)\nnums2 := dlrNums(subRoot)\nreturn kmpSearch(nums1, nums2)\n}\nconst lrNilVal = -10001\nvar leftNilNode = TreeNode{\nVal: lrNilVal,\n}\nvar rightNilNode = TreeNode{\nVal: lrNilVal,\n}\nfunc dlrNums(root *TreeNode) []int {\nvar nums []int\nif root == nil {\nreturn nums\n}\nvar st []*TreeNode\nst = append(st, root)\ntmpRoot := root\nfor len(st) &gt; 0 {\n// pop\ntmpRoot = st[len(st) - 1]\nst = st[:len(st) - 1]\n// visit\nnums = append(nums, tmpRoot.Val)\nif tmpRoot.Val != lrNilVal &amp;&amp; tmpRoot.Left == nil {\ntmpRoot.Left = &amp;leftNilNode\n}\nif tmpRoot.Val != lrNilVal &amp;&amp; tmpRoot.Right == nil {\ntmpRoot.Right = &amp;rightNilNode\n}\nif tmpRoot.Right != nil {\nst = append(st, tmpRoot.Right)\n}\nif tmpRoot.Left != nil {\nst = append(st, tmpRoot.Left)\n}\n}\nreturn nums\n}\n//  i\n//  nums a  a   b   a   a   b   a   a   c\n//  pat\n//  j\nfunc kmpSearch(nums, pat []int) bool {\nnext := getNext(pat)\nj := 0\nfor i := 0; j &lt; len(pat) &amp;&amp; i &lt; len(nums); i++ {\nfor ; j &gt; 0 &amp;&amp; nums[i] != pat[j]; j = next[j-1]{}\nif nums[i] == pat[j] {\nj++\n}\n}\nreturn j == len(pat)\n}\nfunc  getNext(pat []int) []int {\nnext := make([]int, len(pat))\nnext[0] = 0\nfor l, j := 0, 1 ; j &lt; len(pat); j++ {\nfor l &gt; 0 &amp;&amp; pat[l] != pat[j] {l = next[l-1]}\nif pat[l] == pat[j] {\nl++\n}\nnext[j] = l\n}\nreturn next\n}\n</code></pre> <p>116. \u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488</p> code <pre><code>/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Left *Node\n *     Right *Node\n *     Next *Node\n * }\n */\nfunc connect(root *Node) *Node {\nif root == nil {\nreturn root\n}\n// \u6700\u4e0b\u9762\u4e00\u5c42\uff0c\u76f4\u63a5\u8fd4\u56de\nif root.Left == nil &amp;&amp; root.Right == nil {\nreturn root\n}\nroot.Left.Next = root.Right\nif root.Next != nil {\nroot.Right.Next = root.Next.Left\n}\nconnect(root.Left)\nconnect(root.Right)\nreturn root\n}\n</code></pre> <p>105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811</p> code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc buildTree(preorder []int, inorder []int) *TreeNode {\nif len(preorder) == 0 {\nreturn nil\n}\nrootIdx1 := 0\nrootIdx2 := indexOf(inorder, preorder[rootIdx1])\nroot := &amp;TreeNode{\nVal: preorder[rootIdx1],\n}\ninorder1 := inorder[0:rootIdx2]\ninorder2 := inorder[rootIdx2 + 1:]\npreorder1 := preorder[1: 1 + len(inorder1)]\npreorder2 := preorder[1+len(inorder1):]\nleft := buildTree(preorder1, inorder1)\nright := buildTree(preorder2, inorder2)\nroot.Left = left\nroot.Right = right\nreturn root\n}\nfunc indexOf(nums []int, tgt int) int {\nfor i, num := range nums {\nif tgt == num {\nreturn i\n}\n}\nreturn -1\n}\n</code></pre> <p>173. \u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668</p> code <pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\ntype BSTIterator struct {\nnums []int\ncur int // \u6307\u5411\u5f53\u524d\u8282\u70b9\n}\n// \u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u5c06 root \u7684\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u7ed9\u51fa\u6765 -&gt; nums\nfunc Constructor(root *TreeNode) BSTIterator {\nbst := BSTIterator{\ncur: -1,\n}\nbst.dlr(root)\nreturn bst\n}\n// \nfunc (this *BSTIterator) Next() int {\nthis.cur++\nreturn this.nums[this.cur]\n}\nfunc (this *BSTIterator) HasNext() bool {\nif this.cur + 1 &gt;= len(this.nums) {\nreturn false\n}\nreturn true\n}\nfunc (this *BSTIterator) dlr(root *TreeNode) {\nif root == nil {\nreturn\n}\nthis.dlr(root.Left)\nthis.nums = append(this.nums, root.Val)\nthis.dlr(root.Right)\nreturn\n}\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * obj := Constructor(root);\n * param_1 := obj.Next();\n * param_2 := obj.HasNext();\n */\n</code></pre> <p>80. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 II</p> code <pre><code>func removeDuplicates(nums []int) int {\nif len(nums) &lt;= 2 {\nreturn len(nums)\n}\nfor i := 2; i &lt; len(nums); {\nif nums[i] == nums[i-1] &amp;&amp; nums[i] == nums[i-2] {\ncopy(nums[i:], nums[i+1:])\nnums = nums[:len(nums)-1]\n} else {\ni++\n}\n}\nreturn len(nums)\n}\n</code></pre> <p>189. \u8f6e\u8f6c\u6570\u7ec4</p> code <pre><code>// \u65b9\u6cd5\u4e09\u3001\u539f\u5730\u5b9e\u73b0\uff0c\u4f7f\u7528\u6570\u7ec4\u7ffb\u8f6c\nfunc rotate(nums []int, k int)  {\nn := len(nums)\nif k == 0 || k == n {\nreturn\n}\nk = k % n\nfor i := 0; i &lt; n/2; i++ {\nnums[i], nums[n-i-1] = nums[n-i-1], nums[i]\n}\nfor i := 0; i &lt; k/2; i++ {\nnums[i], nums[k-i-1] = nums[k-i-1], nums[i]\n}\nfor i, cnt := k, 0; i &lt; (n+k)/2; i++ {\nnums[i], nums[n-cnt-1] = nums[n-cnt-1], nums[i]\ncnt++\n}\n}\n</code></pre> <p>55. \u8df3\u8dc3\u6e38\u620f</p> code <pre><code>// dp[i]\n//  1 &lt;- nums[i]\u503c\u7684\u53f3\u8fb9\u8303\u56f4\u5185\u5982\u679c\u5b58\u5728 dp[j] \u4e3a 1\n//  0 &lt;- nums[i]\u503c\u7684\u53f3\u8fb9\u8303\u56f4\u5185\u4e0d\u5b58\u5728 dp[j] \u4e3a1\n// \u521d\u59cb dp[n-1] = 1\n// \n// \u6539\u8fdb\n//  nextOne[i] \u7528\u6765\u8bb0\u5f55dp\u6570\u7ec4\u4e2d\u4e0b\u4e00\u4e2a1\u7684\u4e0b\u6807\uff08\u4ecei\u5f00\u59cb\uff09\n//  \u521d\u59cb nextOne[0~n-1] = n-1\n//  \u66f4\u65b0 dp[i] \n//      \u6839\u636e nextOne[i+1] \u7684\u503c\uff0c\u83b7\u53d6\u4e0b\u4e00\u4e2a1\u7684\u4f4d\u7f6e\n//      d[i] = 1 &lt;- i + nums[i] &gt;= nextOne[i+1]\n//                  \u540c\u65f6\u66f4\u65b0 nextOne[i] = i\n//      dp[i] = 0 &lt;- i + nums[i] &lt; nextOne[i+1]\n//                  \u540c\u65f6\u66f4\u65b0 nextOne[i] = next[i+1]\nfunc canJump(nums []int) bool {\nn := len(nums)\ndp := make([]int, n)\ndp[n-1] = 1\nnextOne := make([]int, n)\nnextOne[n-1] = n-1\nfor i := n-2; i &gt;= 0; i-- {\nif i + nums[i] &gt;= nextOne[i+1] {\ndp[i] = 1\nnextOne[i] = i\n} else {\ndp[i] = 0\nnextOne[i] = nextOne[i+1]\n}\n}\nreturn dp[0] == 1\n}\n</code></pre> <p>45. \u8df3\u8dc3\u6e38\u620f II</p> code <pre><code>func jump(nums []int) int {\nstart := 0\nend := 1\ncnt := 0\nfor end &lt; len(nums) {\nmaxPos := 0\nfor i := start; i &lt; end; i++ {\nmaxPos = max(maxPos, i + nums[i])\n}\nstart = end\nend = maxPos + 1\ncnt++\n}\nreturn cnt\n}\nfunc max(a, b int) int {\nif a &gt; b {\nreturn a\n}\nreturn b\n}\n</code></pre> <p>274. H \u6307\u6570</p> code <pre><code>func hIndex(citations []int) int {\nsort.Ints(citations)\nh := 0\nfor i := len(citations)-1; i &gt;= 0 &amp;&amp; citations[i] &gt; h; i-- {\nh++\n}\nreturn h\n}\n</code></pre> <p>238. \u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef</p> code <pre><code>// \u505a\u4e24\u6b21\u904d\u5386\n// nums 1   2   3   4   5\n// ans  1   1   2   6   24\n// \u7b2c\u4e00\u6b21\u904d\u5386\u8ba9 ans[i] \u4e2d\u4fdd\u5b58 nums[0~i-1] \u7684\u4e58\u79ef\n// \u7b2c\u4e8c\u6b21\u4ece\u53f3\u5f80\u5de6\u904d\u5386\u8865\u5145ans\u5373\u53ef\nfunc productExceptSelf(nums []int) []int {\nn := len(nums)\nans := make([]int, n)\nans[0] = 1\nfor i := 1; i &lt; len(nums); i++ {\nans[i] = nums[i-1] * ans[i-1]\n}\ntmp := 1\nfor i := n-2; i &gt;= 0; i-- {\ntmp *= nums[i+1]\nans[i] *= tmp\n}\nreturn ans\n}\n</code></pre> <p>1419. \u6570\u9752\u86d9</p> code <pre><code>func minNumberOfFrogs(croakOfFrogs string) int {\ncnt := make([]int, 5)\nfor _, ch := range croakOfFrogs {\nswitch ch {\ncase 'c':\nif cnt[4] != 0 {\ncnt[4]--\n}\ncnt[0]++\ncase 'r':\nif cnt[0] == 0 {\nreturn -1\n}\ncnt[0]--\ncnt[1]++\ncase 'o':\nif cnt[1] == 0 {\nreturn -1\n}\ncnt[1]--\ncnt[2]++\ncase 'a':\nif cnt[2] == 0 {\nreturn -1\n}\ncnt[2]--\ncnt[3]++\ncase 'k':\nif cnt[3] == 0 {\nreturn -1\n}\ncnt[3]--\ncnt[4]++\n}\n}\nif cnt[0] + cnt[1] + cnt[2] + cnt[3] == 0 {\nreturn cnt[4]\n}\nreturn -1\n}\n</code></pre> <p>209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4</p> code <pre><code>func minSubArrayLen(target int, nums []int) int {\nstart, end := 0, 0\nn := len(nums)\nans := n + 1\nsum := 0\nmaxSum := -1\nfor end &lt; n {\nfor end &lt; n &amp;&amp; sum &lt; target {\nsum += nums[end]\nend++\n}\n// [start, end)\nmaxSum = max(maxSum, sum)\nans = min(ans, end-start)\nfor start &lt; end &amp;&amp; sum &gt;= target {\nsum -= nums[start]\nstart++\n}\nans = min(ans, end-start+1)\n}\nif maxSum &gt;= target {\nreturn ans\n}\nreturn 0\n}\nfunc min(a, b int) int {\nif a &lt; b {\nreturn a\n}\nreturn b\n}\nfunc max(a, b int) int {\nif a &lt; b {\nreturn b\n}\nreturn a\n}\n</code></pre> <p>3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32</p> code <pre><code>func lengthOfLongestSubstring(s string) int {\nn := len(s)\nif n &lt;= 1 {\nreturn n\n}\nans := 0\nfor i := 0; i &lt; n; i++ {\nfreq := make(map[byte]int)\nfreq[s[i]]++\nj := i + 1\nfor ; j &lt; n; j++ {\nfreq[s[j]]++\nif freq[s[j]] &gt;= 2 {\nans = max(ans, j - i)\nbreak\n}\n}\nif j == n {\nans = max(ans, j-i)\n}\n}\nreturn ans\n}\nfunc max(a, b int) int {\nif a &gt; b {\nreturn a\n}\nreturn b\n}\n</code></pre>","tags":[]},{"location":"3.%E5%85%B6%E4%BB%96%E8%AE%B0%E5%BD%95/202305270228%20leetcode%20%E5%91%A8%E8%B5%9B/","title":"leetcode \u5468\u8d5b","text":"<p>\u8bf4\u660e</p> <p>\u5e0c\u671b\u80fd\u6709\u6240\u6210\u957f\uff0c\u5728\u6b64\u8bb0\u5f55</p>","tags":[]},{"location":"3.%E5%85%B6%E4%BB%96%E8%AE%B0%E5%BD%95/202305270228%20leetcode%20%E5%91%A8%E8%B5%9B/#_1","title":"\u7b2c\u4e8c\u573a","text":"<p>\u8fd9\u5468\u7684\u9898\u76ee\u6bd4\u8f83\u7b80\u5355\uff0c\u82b1\u4e86\u56db\u5341\u5206\u949f\u505a\u4e86\u4e0b\u524d\u4e09\u9898\uff0c\u4e5f\u6ca1\u9047\u5230\u5565\u95ee\u9898\u3002</p> <p>\u6700\u540e\u4e00\u9898\u662f\u56fe\u7684\u95ee\u9898\uff0c\u597d\u591a\u77e5\u8bc6\u90fd\u5fd8\u8bb0\u4e86\uff0c\u5c31\u4e0d\u505a\u4e86\uff0c\u4e4b\u540e\u56de\u987e\u4e00\u4e0b\u56fe\u7684\u77e5\u8bc6\u518d\u6765\u6311\u6218\u5427</p>","tags":[]},{"location":"3.%E5%85%B6%E4%BB%96%E8%AE%B0%E5%BD%95/202305270228%20leetcode%20%E5%91%A8%E8%B5%9B/#_2","title":"\u7b2c\u4e00\u573a\u5468\u8d5b","text":"<p>\u672c\u7740\u5c31\u505a\u4e24\u9898\u7684\u5fc3\u6001\u6765\u7684\uff0c\u7ed3\u679c\u4e5f\u7b97\u662f\u5b8c\u6210\u4e86\u4e24\u9898\uff0c\u4e0d\u8fc7\u8fc7\u7a0b\u8fd8\u662f\u4e0d\u5c3d\u4eba\u610f\uff0c\u7b2c\u4e00\u9053\u7b80\u5355\u9898\u5c31wa\u4e86\u4e94\u6b21\uff0c\u8fd8\u662f\u6709\u70b9\u5c0f\u7d27\u5f20</p> <p>\u7b2c\u4e8c\u9053\u9898\u601d\u8003\u7684\u6709\u70b9\u4e45\uff0c\u5176\u5b9e\u5c31\u662f\u8981\u5728\u4e00\u4e2a\u4e71\u5e8f\u7684\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u5feb\u901f\u627e\u5230\u4e00\u4e2a\u6570\u5728\u7b2c\u51e0\u884c\u7b2c\u51e0\u5217\u7684\u9700\u6c42\uff0c\u5982\u679c\u8fd9\u4e9b\u6570\u88ab\u4fdd\u8bc1\u5728\u4e00\u4e2a\u4e0d\u5927\u7684\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u505anum2Idx[\u6570\u5b57]=\u4e0b\u6807 \u8fd9\u6837\u7684\u4e00\u4e2a\u6620\u5c04\uff0c\u5c31\u80fd\u5feb\u901f\u627e\u5230\u5bf9\u5e94\u6570\u5b57\u5728\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u4e86 \u4e0d\u8fc7\u7ed3\u679c\u4e5f\u8fd8\u7b97\u662f\u7b26\u5408\u9884\u671f\u4e86\uff0c\u518d\u63a5\u518d\u5389\u5427</p>","tags":[]}]}